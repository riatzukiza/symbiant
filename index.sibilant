"use strict"
(include "./deps")
(import-namespace defs)
(import-namespace js)
(const port (or process.env.PORT 8001))
(const express (require "express"))
(const app (express))
(const chokidar (require "chokidar"))
(const Path (require "path"))
(const Url (require "url"))
(const fs (require "fs"))
(const env (or process.env.NODE_ENV "dev"))
(include "./shell")
(macro import (thing from)
       `(const (literal ...@(content-of thing)) (require @from)))
(macro imports (...imports)
       (map imports (import) `(import ...@(content-of import))))
(import (Path-tree Directory) "./lib/file-system")
(import (Sibilant)  "./lib/sibilant")
(import (create extend mixin curry) "./lib/util")
(const http (require "http"))
(const server (http.Server app))
(const browserify (require "browserify"))
(const io ((require "socket.io") server))
(server.listen port)
(macro lets (...variables)
       (variables.map (=> (c) [`(let ...@(content-of c)) ";\n"])))
(macro route (method path ...body)
       `(@method app @path
                 (=> (req res)
                     (lets (url (Url.parse req.url))

                           ((literal path
                                     query
                                     hash port
                                     search
                                     pathname
                                     auth
                                     slashes
                                     href
                                     protocol
                                     host) url))
                     (def-promised write (v)
                       (res.write v success)) ...@body)))
;; When somthing in sibilant/js changes, it will compile straight to its javascript representation into
;; a mirrored directory
(macro on (emitter event args ...body)
       `(.on @emitter @event  (=> @args ...@body)))
(macro once (emitter event args ...body)
       `(.once @emitter @event  (=> @args ...@body)))
(def add-routes (game bundle)
  (let html-path (Path.join __dirname "games/" game "/html"))
  (route .get (Path.join "/games/" game "/js/main.js")
         (.pipe (.on (bundle.bundle) "error"
                     (aprint "bundle err")) res))
  (app.use (Path.join "/games/" game "/play") (express.static html-path)))
(def comp ((dots args))
  (=> (x) (.reduce args (=> (value f) (f value)) x)))
(def translate-path (path)
  (pipe path
        (.replace  "/sibilant/" "/")
        (.replace ".sibilant" ".js")))
(def build (path )
  (print "building" path)
  (let target (translate-path path))
  (pipe Sibilant
        (.from-file path)
        (.transpile)
        (.save-file target)))
(def add-to-bundle (bundle game)
  (=> (file)
      (bundle.add (Path.join __dirname "games/" game "/js" file))))
(def Set.prototype.each (f)
  (this.for-each f) this)
(def signal-refresh (game connections)
  (=> (promise)
      (then promise string
            (each connections (socket)
                  (.emit socket "change")))))
(type Project (init (src target)))
(def initial-build (p src path)
  (print "initial build of" src path)
  (pipe (Promise.resolve p)
        (then-do (each src (name) (build (Path.join  path name))))
        (then-do (each src (name) (build (Path.join  path name))))))
(type Auto-compiler
      (init (name bundle
                  (namespace (.of io name))
                  (connections (new Set))
                  (sibilant-path (Path.join __dirname "games/" name "/sibilant/js"))
                  (source-watcher (chokidar.watch sibilant-path))
                  (src ((create Directory) sibilant-path)))
            (initial-build null src sibilant-path ))
      (generic change (mth) (path name connections)
               ((signal-refresh name connections) (build path)))
      (generic connect (mth) (namespace connections source-watcher bundle name)
               (on source-watcher "change" (path)
                   (pipe (.change this path)
                         (then-do (shell-command  git branch | "grep \\*" | cut "-d" "' '" "-f2"))
                         (then branch-name
                               (print "gitting" branch-name)
                               (let compile-branch (+ "compiled-" branch-name))
                               (shell
                                (git stash)
                                (git branch [compile-branch])
                                (git checkout [compile-branch])
                                (git add "." )
                                (git commit "-m" (+ "compiled " path))
                                (git checkout  stash)))))
               (on namespace "connection" (socket)
                   (.add connections socket)
                   (on socket "disconnect" ()
                       (.delete connections socket)))))
(type Bundler
      (init ((bundle (browserify) )
             (js-path (Path.join __dirname "games/" game "/js"))
             (dir ((create Directory) js-path)))))
(def auto-compile (game bundle)
  (when (= env "dev")
    (let compiler ((create Auto-compiler) game bundle))
    (.connect compiler )))
(def bulk-bundle (dir bundle)
  (print "bulk add on" dir.path)
  (each  dir (name)
         (then (.find dir name) node
               (unless (= name "includes")
                 (if (= node.symbol Directory.symbol)
                    (bulk-bundle node bundle)
                    (do
                     (print "adding" node.path "to bundle")
                     (bundle.add node.path)))))))

(def add-game (game)
  "sets up the middleware and build tools for a game's directory"

  (var bundle (browserify)
       js-path (Path.join __dirname "games/" game "/js"))

  (var dir ((create Directory) js-path))

  (add-routes game bundle)

  (pipe (Promise.resolve (auto-compile game bundle))
        (then-do (bulk-bundle dir bundle))))

(let games ((create Directory) "./games"))

(pipe (.each games add-game)
      (.then (aprint "all games loaded"))
      (.catch  (aprint "failed to set up all the games")))
