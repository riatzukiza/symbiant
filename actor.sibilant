
(type Indexed-set

      (init ((*set (new Set)) (*array [])))

      (gmth add ())
      (gmth delete ())
      (gmth each ())
      (gmth join ())
      (gmth intersect ())
      (gmth has ()))

(type Model
      (init ((actors (indexed-set))
             (messages (indexed-set))))
      (gmth add (actor))
      (mth create (type (dots args))
           ((create type) (dots args)))
      (gmth get (name) )
      (gmth delete ()))

(type Message
      (property promise Promise)

      (init ( (addresses  (literal to from) ) model )
            (.push model.messages this))

      (gmth send (sender args success fail)
            (.then (.send sender args recipiant)
                   success fail)))

(type Queue
      (init (sequence []))
      (gmth enqueue ())
      (gmth dequeue ))
(type Promise
      (init ()))

(type Actor
      (property events (new Event-emitter))

      (init (promise (waiting [])
                     (handled [])
                     callback)
            (.push mode.actors))


      (generic send (fluent mth) (args promise messages callback)
               (let (i (.push messages args ))
                 (assign this.promise
                         (.then promise
                                (=>  (value)
                                     (callback value args)))))))

(generic Actor.send (def data) (key))

