(comment (def html-element (name )

           (let=> (attributes body stream)

                  ((body ((create Future-array) body))
                   ( stream ((create Promise-writer) stream))

                   (write-element-attribute
                    (=> (value key) (resolve-then value (.write stream (+ key "=" "'" value "' " ))))))

                  (sequence (Promise.resolve) then-do

                            ((.write stream opening))

                            ((.map (Future.Object.resolve attributes) attributes
                                   write-element-attribute))

                            ((.write stream ">"))
                            ((.map-serial body (.bind stream.list.write stream)))
                            ((.write stream (+ "</" name ">")))))))
(type Promise-writer 
      (init ( stream (promise (Promise.resolve))))
      (gmth write (message promise stream)
            (assign this.promise
                    (pipe promise
                          (then-do (pipe (Promise.resolve message)
                                         (then value (make-promise (.write stream value success))))))))) 

(macro resolve-then ( value ...body)
       `(pipe (Promise.resolve @value)
              (then @value ...@body)))

(def write-element-attribute (value key)
  (resolve-then value (.write stream (+ key "=" "'" value "' " ))))
(macro arrow-let (defs ...body)
       `(let @(.map defs.contents
                    (=> (def)
                      `(@(first def.contents) (=> ...@(rest def.contents)))))))
(alias-macro arrow-let =>-let)
(alias-macro arrow-let flet)

(type Html-element

      (getter body () ((create Future-array) this.*body))
      (getter stream () ((create Promise-writer) this.*stream))
      (getter promise () this.*promise)

      (init (name attributes *stream *body  (*promise (Promise.resolve)))))
(def-generic Html-element.render (stream name  attributes body promise)

             (let ((write-element-attribute (=> (value key) (resolve-then value (.write stream (+ key "=" "'" value "' " )))))

                   (render-child-segment (=> (segment)
                                             (if (or (string? segment) (instanceof Buffer segment))
                                                 (.write stream segment)
                                                 (.render segment stream))))

                   (render-opening-tag (=> () (.write stream (+ "<" name))))

                   (render-attributes (=> () (.map (Future.Object.resolve attributes)
                                             write-element-attribute)))

                   (render-children (=> () (.map-serial body render-child-segment)))
                   (render-closing-tag (=> () (.write stream (+ "</" name ">")))))

                  (sequence promise then

                            (render-opening-tag)

                            (render-attributes)

                            (end-opening-tag)

                            (render-children)

                            (render-closing-tag))))


(markup-to-stream
 process.stdout
 (:html
  (:head )
  (:body (:h1 "this is a shitty website!")
         (:div {id "main-container"}
               (span "yes, yes it is.")))))

((create Html-element))
