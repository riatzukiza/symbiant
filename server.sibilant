"use strict"

(namespace symbiant)

(include "./deps")
(import-namespace defs)
(import-namespace js)

(include "../kit/inc/macros.sibilant")
(import-namespace kit)
(require! (literal Trie trie) "../kit/src/collection/trie"
          (literal Maybe maybe) "../kit/src/collection/singletons")

(macro let (args ...body)
       `((lambda (...@(.map args.contents (=> (el) (first el.contents))))
           ...@body) ...@(.map args.contents (=> (el) (second el.contents)))) )

(macro let* (vars ...body)

       (if (> (length vars.contents) 1)
           `(let (@(first vars.contents))
              (let* (...@(rest vars.contents))
                ...@body))
           `(let (@(first vars.contents))
              ...@body)))

(def bulk-bundle (dir bundle)
  (print "bulk add on" dir.path)
  (each  dir (name)
         (then (.find dir name) node
               (unless (= name "includes")
                 (if (= node.symbol Directory.symbol)
                     (bulk-bundle node bundle)
                     (do (print "adding" node.path "to bundle")
                         (bundle.add node.path)))))))
(def add-routes (game bundle)

  (let* (( game-base-path  (Path.join "/games/" game ))
         ( game-main-script-path (Path.join game-base-path "/js/main.js")))

    (.get app game-main-script-path

          (mount-browserify-bundle bundle))

    (let (( html-dir-path (Path.join  "games/" game "/html")))

      (app.use (Path.join game-base-path "/play")
               (express.static html-dir-path)))))
(def Set.prototype.each (f)
  (.for-each this f)
  this)

(macro import (thing from)
       `(const (literal ...@(content-of thing)) (require @from)))



(include "./required.sibilant")


(include "./config.sibilant"
         "./compiler")

(macro create-simple-express-middleware (args ...body)
       `(=> @args (=> (req res) ...@body)))

(macro define-simple-express-middleware (name args ...body)
       `(var @name
             (create-simple-express-middleware
              @args ...@body)))

(define-simple-express-middleware
    mount-browserify-bundle
    (bundle)
  (pipe (bundle.bundle)
        (.on  "error" (aprint "bundle err"))
        (.pipe  res)))


(def add-game (game)

  "sets up the middleware and build tools for a game's directory"

  (print "game" game)

  (var bundle (browserify)
       js-path (Path.join  "games/" game "/js"))

  (var dir ((create Directory) js-path))

  (add-routes game bundle)
  (auto-compile game bundle io)

  (bulk-bundle dir bundle))

(include "./games"
         "./routes")
