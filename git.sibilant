(include "./shell")

(import-namespace js)
(import-namespace defs)

(macro import (thing from)
       `(const (literal ...@(content-of thing)) (require @from)))
(import (create extend mixin curry) "./lib/util")

(const heroku {})
(macro mixes-with (obj))

(type Command-sequence

      (uses Future (then catch resolve ))

      (init (name (promise (Promise.resolve)))))
(specify Event-emitter (extend Event-emitter.prototype)
         (property init Event-emitter))
(type Indexed-set

      (init ((*set (new Set)) (*array [])))

      (gmth add ())
      (gmth delete ())
      (gmth each ())
      (gmth join ())
      (gmth intersect ())
      (gmth has ()))

(type Model
      (init ((actors (indexed-set))
             (messages (indexed-set))))
      (gmth add (actor))
      (mth create (type (dots args))
           ((create type) (dots args)))
      (gmth get (name) )
      (gmth delete ()))

(type Message
      (property promise Promise)

      (init ( (addresses  (literal to from) ) model )
            (.push model.messages this))

      (gmth send (sender args success fail)
            (.then (.send sender args recipiant)
                   success fail)))

(type Queue
      (init (sequence []))
      (gmth enqueue ())
      (gmth dequeue ))
(type Promise
      (init ()))

(type Actor
      (property events (new Event-emitter))

      (init (promise (waiting [])
                     (handled [])
                     callback)
            (.push mode.actors))


      (generic send (fluent mth) (args promise messages callback)
               (let (i (.push messages args ))
                 (assign this.promise
                         (.then promise
                                (=>  (value)
                                     (callback value args)))))))

(generic Actor.send (def data) (key))



(type Git

      (uses Command-sequence (bind send))
      (property name "git")

      (init (promise)))

(def create-instance (type args)
  ((create type) ...args))

(macro git (...args)
       `(pipe (create-instance Git)
              ...@(.map args (=> (arg)
                                 `(.send (quote @(first arg.contents)) [
                                         ...@(rest arg.contents)])))))
(generic Command-sequence.access (def) (f args promise )
         (.then promise (=> (value) (f value args))))

(generic Command-sequence.map (def) (f args promise)
         (create-instance (.access this f args promise)))

(generic Command-sequence.send  (def) (args name)
         (.map this (-> (exec args name))))
(generic Command-sequence.request  (def) (key args name)
         (.map this (-> (exec args (+ name " " key)))))


(generic heroku.push-all (def) (message)
         (git (add ".")
              (commit "-m" (+ "'" message "'"))
              (push 'origin 'master)
              (push 'heroku 'master)))
(comment (.then (shell
         (git add ".")
         (git commit "-m" (+ "'" message "'"))
         (git push origin master)
         (git push heroku master))
        (aprint "heroku push all success" message)))
