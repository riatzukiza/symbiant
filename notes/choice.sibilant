(comment (macro choose (...choices)
                (if (not (empty? choices))
                    (scoped
                     ...@(mapcar (=> (c) `(.push paths (-> @c))))))))
(comment (choice {x ant.x y ant.y}
                 (loop (area weights.state   w  ant 3)
                       (if-valid-move ent ))

                 (+ w ant.deviance)



                 (choose (literal x y))))

(defparameter *paths* nil)
(defconstant failsym '@)
(defmacro choose (&rest choices)
  (if choices
      `(progn
         ,@(mapcar #'(lambda (c)
                       `(push #'(lambda () ,c) *paths*))
                   (reverse (cdr choices)))
         ,(car choices))
      '(fail)))
(defmacro choose-bind (var choices &body body)
  `(cb #'(lambda (,var) ,@body) ,choices))
(defun cb (fn choices)
  (if choices
      (progn
        (if (cdr choices)
            (push #'(lambda () (cb fn (cdr choices)))
                  *paths*))
        (funcall fn (car choices))
        (fail))))
(defun fail ()
  (if *paths*
      (funcall (pop *paths*))
      failsym))
