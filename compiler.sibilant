"use strict"
(include "./deps")
(import-namespace defs)
(import-namespace js)

;;(const __dirname (or global.__dirname "."))
(var port (or process.env.PORT 8001)

     env (or process.env.NODE_ENV "dev"))

(require! "express" "chokidar" )

(include "./shell")

(macro import (thing from)
       `(const (literal ...@(content-of thing)) (require @from)))

(macro imports (...imports)
       (map imports (import) `(import ...@(content-of import))))
(def signal-refresh (game connections)
  (=> (promise)
      (then promise string
            (each connections (socket)
                  (.emit socket "change")))))
(type Auto-compiler
      (init (name bundle io
                  (namespace (.of io name))
                  (connections (new Set))
                  (sibilant-path (Path.join  "games/" name "/sibilant/js"))
                  (source-watcher (chokidar.watch sibilant-path))
                  (src ((create Directory) sibilant-path)))
            (initial-build null src sibilant-path ))
      (generic change (mth) (path name connections)
               ((signal-refresh name connections) (build path)))
      (generic connect (mth) (namespace connections source-watcher bundle name)
               (on source-watcher "change" (path)
                   (unless this._compiling
                     (assign this._compiling true)
                     (pipe (.change this path)
                           (then-do (shell-command  git branch | "grep \\*" | cut "-d" "' '" "-f2"))
                           (then branch-name
                                 (print "gitting" branch-name)
                                 (let compile-branch (+ "compiled-" branch-name))
                                 (shell
                                  (git add "-A" "." )
                                  (git commit "-m" (+ "compiled " path))
                                  (git push origin [branch-name])))

                           (then-do (assign this._compiling false)))))
               (on namespace "connection" (socket)
                   (.add connections socket)
                   (on socket "disconnect" ()
                       (.delete connections socket)))))
(def auto-compile (game bundle io)
  (when true ;;(= env "dev")
    (let compiler ((create Auto-compiler) game bundle io))
    (.connect compiler )))
(export auto-compile)
(def initial-build (p src path)
  (print "initial build of" src path)
  (pipe (Promise.resolve p)
        (then-do (each src (name) (build (Path.join  path name))))
        (then-do (each src (name) (build (Path.join  path name))))))
(def build (path )
  (print "building" path)
  (let target (translate-path path))
  (pipe Sibilant
        (.from-file path)
        (.transpile)
        (.save-file target)))
(def translate-path (path)
  (pipe path
        (.replace  "/sibilant/" "/")
        (.replace ".sibilant" ".js")))
