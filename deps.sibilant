
(include "./macros/defs")
(import-namespace defs)

(include "./macros/js/index")
(import-namespace js)


(macro functor (obj method args ...body) `(@method @obj (=> @args ...@body)))

(macro event (method emitter  event args ...body)
       `(pipe  @emitter
               (@method (quote @event) (=> @args ...@body))
               (.once "error"

                      (=> (err)
                          (print "error on" (quote @event)
                                 "of" (quote @emitter)
                                 "given" (quote @args))
                          (print err)))))

(macro on (emitter event args ...body)
       `(.on @emitter @event  (=> @args ...@body)))

(macro once (emitter event args ...body)
       `(event .once @emitter @event @args ...@body))


(macro then (obj arg ...body)
       `(functor @obj .then (@arg) ...@body))

(macro sequence (start f ...body)
       `(pipe @start
              ...@(functor body .map (term)
                           `(@f ...@(get term "contents")))))

(macro configure (configs dir ...body)

       `(functor @configs .map (c k)
                 (sequence (.get-child @dir k) then ...@body)))

(macro p-map (...body)
       `(literal
         ...@(functor body .map (prop)
                      `(property @(first prop.contents)
                                 @(second prop.contents)))))

(macro content-of (expr)
       `(get @expr "contents"))

(macro export (value)
       `(set module.exports (quote @value) @value))

(macro map-content (expressions ...body)
       `(functor @expressions .map ((literal content))
                 ...@body))
(macro functorial (def name args ...body)

       `(@def @name (callback ...@ (content-of args)) ...@body))
(macro generic (name def args ...body)
       `(...@(content-of def) @name
            (...@(functor (content-of args) .map (arg)

                          (if (expression? arg)
                              `(default @(first (content-of arg))
                                        @(second (content-of arg)))
                              `(default @arg (get this (quote @arg))))))
            ...@body))
(macro set-for (target ...body)
       (functor body .map (arg i)
                (if (expression? arg)
                    `(set @target  (quote @(first (content-of arg)))
                          @(first (content-of arg)))
                    `(set @target (quote @arg) @arg))))
(macro init (args ...body)
       `(generic init (mth)  @args
                 (set-for this ...@(content-of args))
                 ...@body
                 this))


;; A library I've not finished yet for working with http requests.

;;(macro has (object property (default predicate `defined?)) `(@predicate (get @object (quote @property))))

;;(comment (has key object function?))


(macro functorals (...bodys)
       (map-content body `(functorial ...@content)))

(macro recursive-functorial (name args obj value ...body)
       `(functorial @name @args (functor @obj .each (@value) ...@body)))

(macro fluent (def name args ...body)
       `(@def @name @args ...@body this))


(macro bind-list (l f)
       `(functor @l .reduce (x)))


(macro getter (name args ...body)
       ["get " `(mth @name @args ...@body)])
(macro setter (name args ...body)
       ["set " `(mth @name @args ...@body)])
(macro after (name def args ...body)
       `(generic @name @def
                 (...@(content-of args)
                     (target this)
                     (@name (=> ((dots args))
                                ((get target (quote @name))
                                 (dots args)))))
                 (@name ...arguments)
                 ...@body))
(macro gmth (name args ...body)
       `(generic @name (mth) @args ...@body))


(macro emits (name def args)
       `(after @name @def @args
               (target.emit (quote @name))))

(macro each (o arg ...body)
       `(functor @o .each @arg ...@body))
(macro reduce (o arg ...body)
       `(functor @o .reduce @arg ...@body))
(macro export (name)
       `(set exports (quote @name) @name))

(macro map (value args ...body)
       `(functor @value .map @args ...@body))

(macro a-let (vars ...body)
       `(then (.all Future.Object
                    (p-map ...@ (map (content-of vars) ((literal contents ))
                                     `(@ (first contents) @ (second contents)))))
              (literal ...@ (map (content-of vars) ((literal contents))
                                 (first contents)))


              ...@body))
(macro s-let! (vars ...body)
       `(do ...@(map vars.contents ((literal contents))
                 `(let @ (first contents) @ (second contents )))
         ...@body))

(macro lift (future-type name source)
       `(const @name (.lift @future-type @source)))

(macro lift-from (source future-type ...body)
       `(const [...@body]
               [...@(map  body (name)
                          `(.lift @future-type (get @source (quote @name))))]))

(macro then-thunk (p ...body) `(then @p nil ...@body))
(alias-macro then-thunk #~)
(alias-macro then-thunk then-do)


(macro proxy (name property)
       `(mth @name ((dots args))
             ((get this (quote @property) (quote @name)) (dots args))))
(macro catch (p ...body)
       `(.catch @p (=> (e) ...@body)))
