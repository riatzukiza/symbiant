
(require! (lit game) "./game"

          (lit Physics) "sibilant-game-engine/client/systems/physics"

          (lit Velocity) "sibilant-game-engine/client/systems/velocity"
          (lit Collision) "sibilant-game-engine/client/systems/collision"
          (lit home home-pos ants plants) "./entities"
          (lit update-particle) "./field"
          (lit Signal-field) "./forces/signal-field"
          config "./config")

(macro random-float ( min max) `(+ (* (Math.random) (- @max @min)) @min))
(macro random-signed (max) `(random-float (* -1 @max)  @max))

(var is-collision false)
(var is-win false)
(var is-loose false)

(def get-velocity (entity) (.get game.systems Velocity entity))
(def apply-static (c)
     (if (not (= config.collision-static 0))
         (.accelerate (get-velocity c.entity) [(random-signed config.collision-static),(random-signed config.collision-static)])))
(def signal-food (v)
     (update-particle c*v c*v.pos, Signal-field.field,
                      Signal-field.layer
                      game.ticker.ticks
                      true
                      true
                      home-pos
                      )

     (set c*v.pos
          'x  home-pos.x
          'y home-pos.y)
     null

     )
(on game.events 'loose ()
    (assign is-loose true))

(on game.events 'collision ([c c* d])

    (if config.print-collision-event (print "collision event" c c* d Collision.quads (lit home home-pos )))
    (if (and (ants.has c*.entity) (= c.entity home)) (.emit game.events 'home-ant-collision [c, c*]))
    (if (and (ants.has c.entity) (= c*.entity home)) (.emit game.events 'home-ant-collision [c*, c]))
    (if (and (= c.entity home) (plants.has c*.entity)) (.emit game.events 'plant-colliding-with-spawn [c, c*]))
    (if (and (= c*.entity home) (plants.has c.entity)) (.emit game.events 'plant-colliding-with-spawn [c*, c]))
    (if (and (ants.has c*.entity) (plants.has c.entity)) (.emit game.events 'ant-found-plant [c*, c]))
    (if (and (ants.has c.entity) (plants.has c*.entity)) (.emit game.events 'ant-found-plant [c, c*]))


    (var v (.get game.systems Velocity c.entity))
    (var v* (.get game.systems Velocity c*.entity))

    (var p (.get game.systems Physics c.entity))
    (var p* (.get game.systems Physics c*.entity))

    (var m p.mass)
    (var m* p*.mass)

    (if (and v v* p p*)
        (.emit game.events 'simple-collision [c* c]))

    (assign c*.colliding false)
    (assign c.colliding false))

(on game.events 'home-ant-collision ([home, c])
    (apply-static c))

(on game.events 'plant-colliding-with-spawn ([home, plant])
    (apply-static plant))

(on game.events 'ant-found-plant ([ant, plant])

    (var av (.get game.systems Velocity ant.entity))

    (assign is-win true)

    (update-particle av av.pos, Signal-field.field,
                     Signal-field.layer
                     game.ticker.ticks
                     true
                     true
                     home-pos)
    (var pp (.get game.systems Physics plant.entity))
    (set pp 'mass (Math.max (- pp.mass 1) 0))

    (set av.pos 'x  home-pos.x 'y home-pos.y)
    null)



(on game.events 'simple-collision ([c, c*])

    (var v (.get game.systems Velocity c.entity))
    (var v* (.get game.systems Velocity c*.entity))

    (var p (.get game.systems Physics c.entity))
    (var p* (.get game.systems Physics c*.entity))

    (var m p.mass)
    (var m* p*.mass)

    (set v
            'xd (/ (+ (* v.xd (- m m*))
                      (* 2 m* v*.xd))
                   (+ m m*))
            'yd (/ (+ (* v.yd (- m m*))
                      (* 2 m m*))
                   (+ m m*)))
    (set v*
         'xd (/ (+ (* v*.xd (- m* m))
                   (* 2 m v.xd))
                (+ m* m))
         'yd (/ (+ (* v*.yd (- m* m))
                   (* 2 m v.yd))
                (+ m* m)))
    null
    )

(on game.events 'tick ()
    (ants.group.each (=> (ant)

                         (update-particle av av.pos, Signal-field.field,
                                          Signal-field.layer
                                          game.ticker.ticks
                                          true
                                          false
                                          home-pos))
                     null)
    (plants.group.each (=> (plant)

                           (if (>= 0 pp.mass)
                               (do (print "plant despawned")(.despawn plant.entity))
                               (do
                                (var physics (.get game.systems Physics plant))

                                (set physics 'mass (+ physics.mass config.growthRate))
                                (set physics 'scale (+ physics.scale config.growthRate))

                                (when (> physics.mass config.plantMassLimit)
                                      (set physics 'mass (/ physics.mass 2))
                                      (spawn-plant [(+ (random-signed physics.mass) physics.position.x)
                                                     (+ (random-signed physics.mass) physics.position.y)]
                                                   physics.mass)))) null)))
