(include "kit/header" )
(import-namespace kit)

(include "kit-interface/header")
(import-namespace interface)

(set global
     'mixin mixin
     'create create)

(require! (lit List) "sibilant-game-engine/client/data-structures/list")
(def-generic List.rotate-until (predicate (t 0))
             (if (predicate this.head.item)
                 this.head.item
                 (> t (- this.size 1))
                 (pipe this .rotate (.rotate-until predicate (++ t)))
                 false))

(require! (lit Dot) "sibilant-game-engine/client/systems/rendering/dot"
          (lit Position) "sibilant-game-engine/client/systems/position"
          (lit Velocity) "sibilant-game-engine/client/systems/velocity"
          (lit Physics) "sibilant-game-engine/client/systems/physics"
          (lit Component System) "sibilant-game-engine/client/ecs/component"
          (lit Group) "sibilant-game-engine/client/data-structures/group"

          (lit Collision) "sibilant-game-engine/client/systems/collision"
          (lit Signal-field) "./forces/signal-field"
          (lit Friction) "./forces/friction"
          (lit game active-game-systems) "./game"
          (lit Tree-map) "tree-kit"
          config "./config")
(var clear (#->  .clear))

(define Entity-group Interface

        (init (name aspects system (group ((create Group)))))

        (def-generic clear (group) (.each group (=> (e)
                                                    (print "despawning" e)
                                                    (.clear e))))
        (def-generic has (entity group) (group.has entity))

        (def-generic spawn ( aspects system group)
                     (collect e (.spawn system aspects )
                              (.add group e)))
        (def-generic despawn (entity group)
                     (.remove group entity)
                     (.despawn entity )))


(macro random-sign  ( ) `(if (< (Math.random) 0.5) -1 1))


(macro random-float ( min max) `(+ (* (Math.random) (- @max @min)) @min))
(macro random-signed (max) `(random-float (* -1 @max)  @max))

(def Tree-map.get ((dots args))
     (get (.find this (dots args)) 'value))

(def memoize (f)
     (var cache ((create Tree-map)))
     (=> ((dots args))
         (remember cache args
                   (f (dots args)))))

(var rgba (memoize (=> (r g b a) (lit r g b a))))
(def entity (aspects ) (.spawn game.ent aspects ))
(var home (entity [Dot Position Physics Collision]))
(var home-pos (.get game.systems Position home))


(set (.get game.systems Dot home)
     'color (rgba 0 255 0 255))

(set (.get game.systems Position home )
     'x (first config.home-location)
     'y (second config.home-location)
     'z 1)

(print "home starting pos" (.get game.systems Position home ))

(set (.get game.systems Physics home)
     'scale 1
     'mass 1
     'forces [])







(set (.get game.systems Collision home)
     'name 'home)
(set home 'name 'home)

(const ants ((create Entity-group)
             "Ants"
             active-game-systems
             game.ent))
(def spawn-ant ([x, y], home, starting-life)
     (var ant (.spawn ants active-game-systems))

     (set (.get game.systems Dot ant)
          'color (rgba 255 0 0 255))


     (set (.get game.systems Position ant )
          'x x
          'y y
          'z 1)


     (set (.get game.systems Physics ant)
          'scale 1
          'mass 1
          'forces [SignalField, Friction])
     (var v (.get game.systems Velocity ant))

     (if (not (= config.spawn-static 0))
         (.accelerate v [(random-signed config.spawn-static),
                          (random-signed config.spawn-static)]))

     ant)


(const rocks ((create Entity-group) "Rocks" [Dot, Position, Physics, Collision, Velocity]
              game.ent
              ))

(print rocks)

(def spawn-rock ([x, y], mass, scale)
     (var rock (.spawn rocks [Dot, Position, Physics, Collision, Velocity]))
     (var hardness (Math.min (Math.round (* 0.01 (/ mass scale))) 255))

     (set (.get game.systems Dot rock)
          'color (rgba (+ hardness 30) (+ hardness 30)   (+ hardness 30) 255))

     (set (.get game.systems Physics rock)
          'mass mass
          'scale scale
          'forces [Friction])

     (set (.get game.systems Position rock)
          'x x
          'y y))

(const plants ((create Entity-group) "Plants" [Dot, Position, Physics, Collision, Velocity]
              game.ent))
(def spawn-plant ([x, y], mass)
     (var plant (.spawn plants [Dot, Position, Physics, Collision, Velocity]))
     (var hardness (Math.min (Math.round (* 0.1 mass)) 255))

     (set (.get game.systems Dot plant)
          'color (rgba (+ hardness 30) 255   (+ hardness 30) 255))

     (set (.get game.systems Physics plant)
          'mass mass
          'scale mass
          'forces [Friction])

     (set (.get game.systems Position plant)
          'x x
          'y y))

(var number 1)
(var next-spawn (=> () (unless (>= ants.group.size config.ant-limit)
                            (spawn-ant [home-pos.x home-pos.y] home)
                            (set-timeout next-spawn (Math.round (* 1000 (/ 1 config.spawn-rate)))))))

(def clear-ants () (.clear ants))

(do-times config.rocks (spawn-rock [(random-signed window.innerWidth window.innerHeight)
                                     (random-signed window.innerWidth window.innerHeight)]
                                   (+ 10 (random-signed 10))
                                   (+ 10 (random-signed 10))))
(do-times config.starting-plants (spawn-plant [(random-signed window.innerWidth window.innerHeight)
                                                (random-signed window.innerWidth window.innerHeight)]
                                              (+ 10 (random-signed 10))))
(export spawn-rock)
(export spawn-plant)

(export ants)
(export plants)
(export rocks)

(export home)
(export home-pos)
(export next-spawn)
(export clear-ants)

