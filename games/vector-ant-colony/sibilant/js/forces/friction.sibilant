(require! (lit Physics) "sibilant-game-engine/client/systems/physics"
          (lit Collision) "sibilant-game-engine/client/systems/collision")

(print "what")
(require! config "../config")

(define Friction Physics.Force
        (def apply (c)
             (var v c.velocity)
             (var collision (.get c.system.process.systems Collision c.entity))
             (var physics (.get c.system.process.systems Physics c.entity))

             (unless (and (= v.xd 0) (= v.yd 0))
                     ;; (print "applying friction" v collision physics)
                     (set v
                          'xd (* v.xd (/ 1 (* physics.scale physics.mass config.friction) ))
                          'yd (* v.yd (/ 1 (* physics.scale physics.mass config.friction) )))

                     null
                     )))
(export Friction)
