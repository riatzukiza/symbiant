;; Display will be a matrix of color values.

;; we first update the content of the matrix, then we render them
;; to the canvas

(macro position (x y) `(p-map (x @x) (y @y)))

(macro color (r g b) `(p-map (red @r) (green @g) (blue @b)))

(macro fill-color (r g b) `(assign ctx.fill-style (+ "rgb(" @r "," @g "," @b ")")))
(macro random-color ()
       `(color (random-int 0 256)
              (random-int 0 256)
              (random-int 0 256)))

(import ( create extend mixin) "./util")
(import (State-space) "./state-space")

(type Display
      (init (width height cell-size ctx
                   (red (State-space (width height)))
                   (green (State-space (width height)))
                   (blue (State-space (width height)))))

      (gmth resize (width height cell-size ctx)
            (Display.init.call this width height cell-size ctx)
            this
            )
      (gmth randomize ()
            (.transit this (=> (color pos)
                               (color (random-int 0 256)
                                      (random-int 0 256)
                                      (random-int 0 256)))))
      (gmth empty ()
            (.transit this (=> (color pos) (color 0 0 0))))

      (generic set (mth) (x y color red green blue)
               (.set red x y color.red)
               (.set green x y color.green)
               (.set blue x y color.blue)) 
      (generic get (mth) (x y red green blue)
               (color (.get red x y ) (.get green x y ) (.get blue x y )))
      (generic get-transition (mth) (x y red green blue)
               (color (.get-transition red x y ) (.get-transition green x y ) (.get-transition blue x y )))
      ;; GOAL:: Produce random colorful static on the grid you see.

      ;; A transition performs an action over every value of the state matricies.
      ;; and inserts the return of that action into the transition matrix.
      ;; When all values with in the state matrix have been itterated over,
      ;; swap the transition and state matricies
      (generic update (fluent mth) (red green blue)

               (.update red)
               (.update green)
               (.update blue))

      (generic transit (fluent mth) (f width height red green blue)
               (loop
                 (for (let i 0) (< i width) (++ i))
                 (for (let j 0) (< j height) (++ j))
                 (.set this i j)
                 (f (color (red.get i j)
                           (green.get i j)
                           (blue.get i j))
                    (position i j))))

      (generic each (fluent mth)(f width height cell-size red green blue ctx)
               (loop
                 (for (let i 0) (< i width) (++ i))
                 (for (let j 0) (< j height) (++ j))
                 (f (color (red.get i j) (green.get i j) (blue.get i j))
                    (position i j))))

      (generic render (fluent mth) (ctx cell-size)
               (let size cell-size)
               (each this ((p-map (red r) (green g) (blue b))
                           (p-map (x i) (y j)))
                     (fill-color r g b)
                     (ctx.fill-rect (* size i) (* size j) size size))))
(export Display)
