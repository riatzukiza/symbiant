(include "./macros/defs")
(include "./macros/js/index")

(import-namespace defs)
(import-namespace js)

(include "./deps")

(const (literal create extend mixin) (require "./util"))
(macro mth! (name args ...body)
       `(state @name (comma ...@(mac-sym-con args)) ...@body))
(macro collect (name value ...body)
       (print "compling collection thing")
       `(do-block (let @name @value)
                ...@body
                @name)
       )
(type Matrix (init ((array [])  width height (matrix array)))

      (gmth size (height width) (*  width height))

      (gmth get-cell-index (x y width)
            (+ (* x width) y ))

      (gmth get-cell (x y  width height array)

            (assign x (mod x width))
            (assign y (mod y height))
            (get array (+ (* x width) y )))

      (gmth set-cell (x y value width array)
            (set array (+ (* x width) y ) value))

      (gmth add-to-cell (x y value height width array)
            (let i (+ (* x width) y ))
            (set array i (+ (get array i) value)))

      (gmth add ())
      (gmth scalar-multiply ())
      (generic submatrix (mth!) (x y nw nh (matrix this))
            (loop
              (collect r ((create Matrix) [] nw nh))
              (for (let i 0) (< i nw) (++ i))
              (for (let j 0) (< j nh) (++ j)
                   (.set-cell r  i j (.get-cell matrix (+ i x) (+ j y))))))
      (generic convolve-sub (mth) (B x y (h B.height) (w B.width))
               (let m 0)
               (this.each-in-sub
                x y h w
                (=> (val i j x y)
                    (assign m (+ m (* (.get-cell this x y)
                                      (.get-cell B x y)))))) m)

      (generic each-in-sub (mth!) (x y sw sh f width height)
               (loop
                 (collect r this)
                 (for (let i 0) (< i nw) (++ i))
                 (for (let j 0) (< j nh) (++ j)
                      (f  (.get-cell matrix (+ i x) (+ j y)) i j x y))))
      (generic each (mth!) (f (matrix this) width height )
            (loop
              (collect r this)
              (for (let x 0) (< x width) (++ x))
              (for (let y 0) (< y height) (++ y)
                   (f (.get-cell matrix x y) x y matrix))))

      (gmth dmap (f (matrix this) width height)
            (.map matrix f matrix width height matrix))

      (generic map (mth!)(f (matrix this) width height
                   (result ((create Matrix) [] width height)))

            (loop (collect r result)
                  (.each matrix )
                  (=> (v x y matrix)
                      (r.set-cell x y (or (f v x y matrix) 0)))))

      (gmth transit (target f (matrix this) height width)
            (.map matrix f matrix height width target))

      (generic convolve-sub (mth!) (B offx offy  (width B.width) (height B.height))
               (loop
                 (collect m 0)
                 (for (let x 0) (< x width) (++ x))
                 (for (let y 0) (< y height) (++ y))
                 (assign m (+ m (* (.get-cell this (+ x offx) (+ y offy)) (.get-cell B x y)))))               )
      (generic convolve (mth!) (B (A this) height width)
            (loop
              (collect m 0)
              (for (let x 0) (< x width) (++ x))
              (for (let y 0) (< y height) (++ y))
              (assign m (+ m (* (.get-cell A x y) (.get-cell B x y))))))

      (generic dot-product (mth!)(B (A this))
            (loop
              (if (= A.width B.height))
              (collect m (Matrix (A.height B.width)))
              (for (let r 0) (< r A.width) (++ r))
              (for (let c 0) (< c B.height) (++ c)
                   (.set-cell m r c 0))
              (for (let i 0) (< i A.height) (++ i)
                   (.add-to-cell
                    m r c

                    (* (.get-cell A r i)
                       (.get-cell self i c)))))))
(export Matrix)
