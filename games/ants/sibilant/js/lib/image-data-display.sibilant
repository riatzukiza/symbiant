
;; Display will be a matrix of color values.

;; we first update the content of the matrix, then we render them
;; to the canvas

(macro position (x y) `(p-map (x @x) (y @y)))

(macro color (r g b) `(p-map (red @r) (green @g) (blue @b)))

(macro fill-color (r g b) `(assign ctx.fill-style (+ "rgb(" @r "," @g "," @b ")")))
(macro random-color ()
       `(color (random-int 0 256)
              (random-int 0 256)
              (random-int 0 256)))

(import ( create extend mixin) "./util")
(import (State-space) "./state-space")

(comment (type Display
       (init (width height cell-size ctx (image-data (.get-image-data ctx))))

       (gmth resize (width height cell-size ctx)
             (Display.init.call this width height cell-size ctx)
             this)

       (gmth randomize ()
             "generate a random field of pixels for the display"
             (.transit this
                       (=> (color pos)
                           (color (random-int 0 256)
                                  (random-int 0 256)
                                  (random-int 0 256)))))

       (gmth clear ()
             "set the display to black"
             (.transit this (=> (color pos) (color 0 0 0))))


       (generic set (mth!) (x y color image-data width height cell-size)

                "set the transition value of the pixel at the given x and y."

                (comment (do-times (* cell-size cell-size)
                           (set image-data (+ (* x width time) y 0) color.red)
                           (set image-data (+ (* x width time) y 1) color.green)
                           (set image-data (+ (* x width time) y 2) color.blue)
                           (set image-data (+ (* x width time) y 3) 0))))


       (generic get (mth!) (x y wdith height)
                (get image-data (+ (* x width ) y 0) )
                (get image-data (+ (* x width ) y 1) )
                (get image-data (+ (* x width ) y 2) )
                (get image-data (+ (* x width ) y 3) )) 

       (generic update (fluent mth) (ctx)

                "swap the transition and the state matricies for all red green and blue."

                (assign this.image-data (.get-image-data ctx)))


       (generic render (fluent mth) (ctx image-data)
                "load the current state into the canvas"
                (.put-image-data ctx image-data))))

(comment (export Display))
