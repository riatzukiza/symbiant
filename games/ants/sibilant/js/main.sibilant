(include "./deps")

(import-namespace defs)
(import-namespace js)


;; Libs
(import (euclidian-distance) "./math")
(import ( create extend mixin) "./util")
(const $ (require "jquery/dist/jquery.min.js"))
(const fs (require "browserify-fs"))

;; Types

(import (Matrix) "./matrix" )
(import (State-space) "./state-space")
(import (Simulation) "./simulation")
(import (Display) "./display" )
(import (Layer) "./layer" )


(import (interface) "./interface")
(import (Pheremones) "./pheremons")
(import (Entity) "./entity")

(import ( Colony Ant each-weight map-weights) "./ant")
(let empty Entity.empty)

;; Declare variables

(let socket (io "/ants"))
(let canvas (document.get-element-by-id "game"))
(let canvasb (document.get-element-by-id "game"))
(let ctx (.get-context canvas "2d"))
(.scale ctx 5 5)

(Display let display (120 120 5 canvas canvasb))
(Simulation let sim (display 60 false))

(let george { x 20 y 20 })

(macro all-zero (w h) `(.dmap ((create Matrix) [] @w @h) (lambda () 0) ))
(macro allns (w h n) `(.dmap  ((create Matrix) [] @w @h) (lambda () @n) ))

(macro random-sign  ( ) `(if (< (Math.random) 0.5) -1 1))

(macro random-signed (max) `(* (random-sign) (random-float 0 @max)))
(macro random-signed (max)
       `(scoped
         (let rand (random-float 0 @max))
         (- @max (/ rand 2))))
(macro random-int ( min max) `(+ (Math.floor (* (Math.random) (- @max @min))) @min))
(macro random-float ( min max) `(+ (* (Math.random) (- @max @min)) @min))

(macro do-times (x ...body)
       `(loop (for (let time 0) (< time @x) (++ time) ...@body)))


(let white (color 255 255 255))
(let green (color 0 255 0))

(type Goal
      (property deviance 1)
      (property pool Matrix)
      (property id 3)

      (init (x y ))

      (generic spawn (mth) (x y goals collision)
               (let ent (collision.get x y))

               (collide ent
                        (display.set x y  green)
                        (let goal (Goal.pool.get-cell x y))
                        (goals.add goal)
                        (collision.set x y goal))))

(assign Goal.pool
        (.dmap ((create Matrix) [] 120 120)

               (lambda (nil x y)


                 ((create Goal) x y)) ))



(comment (do-times  100 (.spawn Ant 60 60 georges sim 2

                        1 -0.2 white)))


(def start (sim)



  (let goals (new Set))
  (def random-goal ()
    (.spawn Goal
            (random-int 0 sim.collision.height)
            (random-int 0 sim.collision.height)
            goals sim.collision))
  (do-times 1000 (random-goal))



  (print "sim" sim )

  (assign Colony.display sim.display
          Colony.collision sim.collision
          Colony.stats sim.stats
          Colony.ants sim.ants)


  ;;herbavores

  ;;predators

  (let reds ((create Colony) "reds" { x 30 y 60} (color 255 0 155) goals ))
  (let georges ((create Colony) "georges" { x 100 y 100} (color 0 0 255 ) reds.ants))
  (comment (let georges ((create Colony) "georges" { x 100 y 100} (color 0 0 255 ) reds.ants))

           (let yellers ((create Colony) "yellers"{ x 20 y 20} yellow goals ))
           (let anti-georges ((create Colony) "anti-georges" { x 100 y 30} (color 30 236 231) georges.ants ))
           (let anti-yellers ((create Colony) "anti-yellers"{ x 46  y 30} (color 30 24 45) yellers.ants )))





  (interface sim)


  (let black (color 0 0 0))


  (reds.spawn 20 )



  (on (sim.start)"tick" (now ticks)


      (macro every (amount time ...body) `(when (= (mod  @time @amount) 0) ...@body))

      (.clear display black 120)
      (every (Math.round (* 10000 (Math.random) (Math.sin ticks))) ticks


             (each goals (goal)
                   (if (= (random-bit) 1)
                       (request-animation-frame
                        (-> (.spawn Goal
                                    (+ goal.x (random-int -2 2))
                                    (+ goal.y (random-int -2 2))
                                    goals
                                    sim.collision)) 0))))


      (do-times 2
        (each Colony.colonies (colony)

             (colony.move)
             (.update colony.weights)
             (.update Pheremones colony.weights colony.display colony.decay colony.color)))




      (each goals (goal) (display.set goal.x goal.y  green))


      (sim.collision.update)

      (display.render)

      (display.update)))
(let yellow {
  red 255 green 255 blue 0
  })
(.load sim  start)

(on socket "change" () (print "change ") (.reload location))

