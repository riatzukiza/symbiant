(include "./deps")
(import-namespace defs)
(import-namespace js)
(let socket (io "/ants"))
(on socket "change" () (print "change ") (.reload location))
(macro describe-table ( describers ...body)
                       (const [eachable each-args table-data container]
                              describers.contents)
                       `(scoped (var table ($ "<table>"))

                                (let header-row ($ "<tr>"))
                                ...@(map (content-of table-data) (entry)
                                         `(.append header-row
                                                  (.text ($ "<th>" )
                                                         (quote @(if (literal? entry)
                                                                     entry
                                                                     (first entry.contents))))))

                                (.append table header-row)
                                (each @eachable @each-args

                                      (var row ($ "<tr>" ))
                                      ...@(map (content-of table-data) (entry)
                                               `(let @(ternary (literal? entry)

                                                       entry
                                                       (first entry.contents))

                                                  (scoped
                                                   (let col-data (.text ($ "<td> " )
                                                                        @(if (literal? entry)
                                                                             entry
                                                                             (second entry.contents))))
                                                   (.append row col-data) col-data)))
                                      (.append table row)

                                      ...@body)
                                (.append @container table)))
(macro every (amount time ...body) `(when (= (mod  @time @amount) 0) ...@body))
;; Libs
(import (euclidian-distance) "./math")
(import ( create extend mixin) "./util")
(const $ (require "jquery/dist/jquery.min.js"))
(const fs (require "browserify-fs"))
;; Types
(import (Matrix) "./matrix" )
(import (State-space) "./state-space")
(import (Simulation) "./simulation")

;;(import (Entity) "./ecs/entity")

(import (Display) "./display" )
(import (Layer) "./layer" )
(import (Pheremones) "./pheremons")
(import (complement) "./color")
(import (weighted-random-element) "./random")
(let george { x 20 y 20 })
;; Declare variables
(Simulation let sim (120 120 5))
(let white (color 255 255 255))
(let green (color 0 255 0))
(let black (color 0 0 0))

(macro area-has (diameter spot center area cond)
       `(scoped (let true? false)
           (area  @area @spot @center @diameter
                  (when @cond (assign true? true)))
                true?))
(macro gene (ent value)
       `(get @ent (quote genetics) (quote @value)))
(macro mutate (ent values)
       (map (content-of values) (value)
            `(assign (get @ent (quote genetics) (quote @value))
                  (+ (get @ent (quote genetics) (quote @value))
                     (random-signed (get @ent (quote genetics) (quote mutation-factor)))))))
(macro random-bit () `(Math.round (Math.random)))

(let empty { id 0 })
(let choice {x 60 y 60})
(macro collide (ent ...body) `(if (or (not @ent) (= @ent empty) (= @ent 0))
                                  (do ...@body)))
(macro area (space el-name center size ...body)
       `(each-in-area @space @center
                     (=> (@el-name i j x y)
                         ...@body) @size ))
(macro adjacent (matrix value-name center ...body)
       `(area @matrix @value-name @center 3 ...@body))
(macro if-valid-move (ent ...body )
       `(when (or (not @ent) (= @ent empty) (= @ent 0)) ...@body))
(macro each-valid-move (ent space ...rest)
       `(adjacent @space w @ent
                  (let ent (.get collision x y))
                  (if-valid-move ent ...@rest)))
(generic each-in-area (fn) (matrix pos f (size 3) (rad (Math.floor (/ size 2))))
         "apply a function to every element in a kernel of the weight matrix.
Values are not changed unless done so explicitly by the function as a side effect."
         (.each-in-sub matrix
                       (- pos.x rad)
                       (- pos.y rad)
                       size size (=> (v i j x y ) (f v i j (+ x i) (+ y j)))))
(macro genetics (assigner ...props)
       `(@assigner genetics (p-map ...@(map props (p)

                                   (if (literal? p) `( @p (random-float 0 0.5))
                                       `( @(first (content-of p))
                                           @(second (content-of p))))))))



(macro member (name value)
       `(set this (quote @name) @value))
(import (Collision) "./systems/collision")
(import (World) "./systems/world")
(type Rendering
      (property entities (.get sim.layers))
      (property weights []))


(assign global.world ((create World) sim.coord Rendering))
(macro gett (name ...body)
       ["get " `(mth @name () ...@body)])

(macro sett (name val ...body)
       ["set " `(mth @name (@val) ...@body)])
(import (Entity) "./ecs/entity")
(import (Entity-group) "./ecs/group")
(import (Ant) "./entities/ant")

(assign Entity.empty empty)

;; FIRST PERSON TO GIVE ME A COLOR, I WILL USE IT FOR THIS TEST ANT!

(specify Colony (extend Entity-group)
         (property colonies (new Set) )
         (property entity-type Ant)
         (init (nest color goals (decay 0.1) colonies (weights ((create State-space) sim.width sim.width)))
               (Entity-group.init.call this)
               (assign weights.layer (.get sim.layers))
               (each weights (w x y)
                     (.add weights.layer
                           (literal
                            x y
                            (gett weight (.get weights x y))
                            (gett color (if (>= this.weight 0 )
                                            color
                                            (complement color)))
                            (gett r this.color.red )
                            (gett g this.color.green)
                            (gett b this.color.blue)

                            (gett a (Math.abs (* 160 this.weight)) ))))
               (.move-up weights.layer)

               (.add colonies this))
         (generic spawn (fluent mth) (color entity-type)
                  (let rx (ternary (= (random-bit) 1) 1 -1))
                  (let ry (ternary (= (random-bit) 1) 1 -1))
                  (let ent (.spawn entity-type
                                   (+ this.nest.x (random-int 0 30) rx)
                                   (+ this.nest.y (random-int 0 30) rx) color))
                  (when ent
                    (assign ent.group this)
                    (this.add ent)
                    (assign ent.nest this.nest)
                    ent))
         (generic serialize (mth) (ants)
                  (map (.to-array ants) (ant) (.serialize ant)))
         (generic update (mth) (entities weights decay)
                  "Process the movement of ever ant in a set of ants, updating weights along the way."
                  (.each this (=> (ant) (.update ant )))
                  (if (= this.entities.size 0)
                      (.delete this.colonies this)
                      (.update Pheremones this.weights 0.1 ))))

(specify Plant (extend Entity)
         (property color green)
         (property life 200)
         (gmth update (pos system)
               (when (= (random-bit) 1)

                   (var rx (ternary (= (random-bit) 1) 1 -1) )
                   (var ry (ternary (= (random-bit) 1) 1 -1) )
                   (request-animation-frame
                    (-> (.spawn this.group
                                (+ pos.x (random-int 0 2) rx)
                                (+ pos.y (random-int 0 2) ry) this.color))))))

(specify Plant-group (extend Entity-group)
         (property entity-type Plant))
(def Map.prototype.each (f)
  (.for-each this f) this)
(def start (sim)
  (let plants ((create Plant-group) ))
  (let reds ((create Colony) { x 30 y 60} (color 255 0 0) plants ))
  (assign global.sim sim)
  (do-times 100 (.spawn reds))
  (do-times 1000 (.random plants  ))
  ;;(interface sim)
  (on (sim.start) "tick" (now ticks)
      (every 5 ticks (.update plants))
      (do-times 2
        (each Colony.colonies (col)
              (.update col)))
      (pipe sim.layers
            (.update )
            (.render))))

(let yellow { red 255 green 255 blue 0 })
(.load sim  start)
