(import ( create extend mixin) "./util")
(import (Matrix) "./matrix")

(type State-space
      (init (width height
                   (state (all-zero height width)) ;; The current, immutable, state of this section of the simulation.
                   (transition (all-zero height width))) ;; The swap space used to generate the next state of the simulation
            ;; After every tick of the simulation, these two values will switch places.
            ;; Doing this saves us creating a new matrix every time.
            )

      (generic resize (mth) (w h  c)
               (this.init.call this w h ))

      ;; Being that this data structure is immutable,
      ;; getting will always refer to the un changing prior state.

      (generic get (mth) (x y state)
               (.get-state this x y state))

      (generic get-state (mth) (x y state)
               (.get state x y))

      ;; except when its not. But that is a whole other basket of worms.
      ;; it is at least a special case such that it requires a specially labeled name,
      ;; and not the privledge of "get".
      (generic get-transition (mth) (x y transition)
               (.get transition x y))

      ;; Setting will then refer to modifications to the transition state, the state that will be.

      (generic set (mth) (x y value state)

               (this.set-state x y value state))

      ;; Same black magic applies here as with get, some times... some times we allow our selves to forget that
      ;; the state isn't supose to change.
      (generic set-state (mth) (x y value state)
               (.set state x y value))

      ;; BRB COFFEE
      ;; But normally we remember this.
      (generic set-transition (mth) (x y value transition)
               (.set transition x y value))

      ;; Simply observe every element of the current state
      (generic each-state (mth) (f state)

               (.each state f)

               this)
      (generic each (mth) (f state)

               (.each state f)

               this)

      ;; Transit is the transformation
      (generic transit (mth) (f state transition)
               (.transit state transition f))

      (generic each-transition (mth) (f transition)

               (.each transition f) this)

      (generic clear (mth) (width height)
               (this.clear-transitions)
               (this.clear-states)
               )
      (generic clear-transitions (mth) (width height)

               (var r ((create Matrix) [] width height)
                    set-transition (-> 0))

               (assign this.transition (.dmap  r set-transition)))

      (generic clear-states (mth) (width height)

               (var r ((create Matrix) [] width height)
                    set-state (-> 0))

               (assign this.state (.dmap  r set-state)))

      ;; An update occurs at the end of a transition.
      ;; Most simply, an update is when the transition matrix is swapped with the state matrix.
      ;; So an update will occur at the end of every transition
      ;; Or is an update the application of the systems *rule* through
      ;; process of transit?

      ;; Update is the switch between the current "state" to the transitory state.
      ;; the "swapy thing"
      (generic update (fluent mth) (f state transition)

               (assign this.state transition
                       this.transition state)))
(export State-space)
