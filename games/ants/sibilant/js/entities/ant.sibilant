(import ( create extend mixin curry) "../util")
(import (Entity) "../ecs/entity")
(const R (require "ramda"))
(import (Entity-group) "../ecs/group")
(import (Matrix) "../matrix" )
(import (Pheremones) "../pheremons")
(import (weighted-random-element) "../random")
(import (State-space) "../state-space")

(import (complement) "../color")
(require! fs "browserify-fs")


(generic moore-neighborhood (def) (w h (weight 1) (c 0))

         (let m (allns w h weight))
         (set m.array (matrix-center w h) c) m)
(def Object.prototype.each (f)
  (.each (Object.keys this) f)
  this)
(def random-color ()
  {
  red (random-int 255)
  green (random-int 255)
  blue (random-int 255)
  })

(def matrix-center (width height )
  (Math.round (/ (- (* width height) 1) 2)))


(macro if-valid-move (ent ...body )
       `(when (or (not @ent) (= @ent 0)) ...@body))

(import (each-in-area) "../area")

;; entities require a position and a color by default
(comment (type Indexed-set
       (init ((member-set (new Set)) (member-array [])))

       (generic add (fluent mth) (value member-set member-array)
                (.push member-array value)
                (.add member-set value))

       (generic each (fluent mth) (f member-array)
                (.each member-array f))))
(comment (type System
       (init ((entities (create-instance Indexed-set))
              (handlers [])))
       (mth start ())
       (mth subscribe (entity)
            (.add this.entities entity)
            )
       (mth update (components)
            (.each this.entities
                   (=> (entity)
                       (.each this.handlers
                              (=> (handler) (handler entity this))))))))
(comment (type Entity
       (init ((systems (new Set)) (components {}) ))
       (mth add-system (system)
            (.add this.systems system)
            this)
       (mth add-component ())
       (mth update ()
            (this.systems.each (=> (system) (.update system components))))))

(comment (pipe (.define Entity "Ant")
       (.value-component "life" 1000)
       (.value-component "collision" world.collision)))
(specify Ant (extend Entity)
         (property life 1000)
         (property collision world.collision)

         (init ( pos color life genetics)
               (unless genetics
                       (genetics  member (deviance (random-signed 0.1)) rate mutation-factor
                                  (find-rate (random-signed 1))
                                  (return-rate (random-signed 1))
                                  (kernel (.dmap (moore-neighborhood 3 3) (-> (random-signed 1))))))
               )
         (getter value ()
                 {
                 genetics this.genetics
                 pos this.pos
                 color this.color
                 life this.life
                 })

         (gmth serialize ()
               (JSON.stringify this.value))

         (gmth load (path)
               (macro call-node-back (func ...args)
                      `(make-promise (.apply @func  this [

                                             ...@args

                                             (=> (err value )
                                                 (if err (fail err) )
                                                 (success value)) ])))

               (pipe (call-node-back fs.read-file path)
                     (.then JSON.parse)
                     (.then (=> (obj) ((create (extend this obj)))))))
         (setter value (obj)
                 (.each obj (=> (v k) (set this k v))))


         (generic *has-discovered-food (mth) ( group  )
                  (let true? false)
                  (area  world.coord spot this 5
                         (assign spot (.get world.collision.entities spot))
                         (when (and  (not true?) (.has group.goals spot) )
                           (assign this._food spot)
                           (assign true? true))) true?)

         (generic *eat (mth) ( group )
                  (.delete group.goals this._food)
                  (assign this.life (+ this.life (* 1000 this._food.life)))
                  (let emission (* (gene this rate) (gene this find-rate) 10))

                  (.update this.group.food-weights)
                  (.emit this.group.food-weights this.pos group.weights  emission 20))
         (generic *reproduce (mth) (nest  group )
                  ;;(print "this make babies" this)
                  (assign this.life (/ this.life 2))
                  (.spawn group this.genetics)
                  (.update this.group.mating-weights)
                  (.emit this.group.mating-weights this.pos group.mating-weights.weights
                         (* 10  (gene this rate) (/ this.life Ant.life)) 20))
         (generic *die (mth) (   group )
                  (.delete group this)
                  (.emit this.seeking this.pos this.seeking.weights (* -10 (gene this rate)  (/ this.life Ant.life)) 20)
                  )
         (generic mutate (mth) ( group nest)
                  ;; me think mutations aughta be put into some fancy ass abstraction some where.
                  (.emit this.group.food-weights this.pos group.weights (- (gene this rate)))
                  (.dmap (gene this kernel) (=> (x) (* x (random-signed 0.2))))
                  (mutate this (return-rate find-rate deviance rate) )
                  (assign this.life Ant.life ))
         (generic *sated (mth) (nest ant )
                  (let sated? (> this.life Ant.life))
                  (if sated? (assign this.seeking this.group.mating-weights)
                      (assign this.seeking this.group.food-weights))
                  sated?)

         (generic *near-nest (mth) (nest  )
                  (area-has 10 spot this world.coord (and (= nest.x x) (= nest.y y))))
         ;; This is the function we should be calling in most instances to create an ant.
         ;; Ants should belong to a colony.
         ;; So there should be a method associated with the colony for creating ants via this method.
         (generic choose (mth) (group collision   )
                  ;; A choice is a weighted random selection from a collection area.
                  (let count 0)
                  (let sum 0)
                  (let done false)
                  (let choice { x this.x y this.y })
                  ;; I think this ends up being needed in multiple places.
                  ;; but in what way?
                  ;; I think some other function will decide what *weight* is, and call this function accordingly.
                  (when (not (gene this kernel))
                    (assign (gene this kernel)
                            (moore-neighborhood 3 3 (gene this deviance))))
                  (let weights null)
                  (var total-weight (=> (w i j) (+ (gene this deviance)  (* w (/ this.life Ant.life) (.get (gene this kernel) i j)))))
                  (each-valid-move  this this.seeking.weights.state
                                    (incr-by count (total-weight w i j)))
                  (let rand (* count (Math.random)))
                  (each-valid-move this this.seeking.weights.state
                                   (incr-by sum (total-weight w i j))
                                   (when (and (<= rand sum) (not done))
                                     (assign choice.x x choice.y y done true)))
                  choice)
         (generic *form-new-colony (mth) ()
                  (let sum-groups-life (=> (group)
                                           (let total-life 0)
                                           (each group.entities (ent)
                                                 (incr-by total-life ent.life)) total-life))
                  (let new-colony ((create Colony) this.pos (random-color)
                                   (weighted-random-element Entity-group.groups sum-groups-life)
                                   (+ this.group.decay (random-signed 0.0001))))
                  (.delete this.group this)
                  (.add new-colony this)
                  (this.group.event.emit "new species" new-colony)
                  (assign this.color new-colony.color)
                  (do-times 10 (.*reproduce this)))
         (generic update (mth) (  group nest  life  )
                  ;; Ants are more likely to choose food-weights over none.
                  ;; but the chance must still exist for the ant to take non marked paths for this to work
                  (let x 0)
                  (let y 0)
                  (-- this.life)
                  (let random (random-int 0 50))
                  ;; Randomly kill off ants who's lives are
                  ;; below a random threshold between some value and 0
                  (let sated? (.*sated this ))
                  (if (> this.life random)
                      (do (let choice (.choose this ))
                          (.move this choice.x choice.y  )
                        (if sated? (if (.*near-nest  this)
                                       (.*reproduce this)
                                       ;;(and
                                        ;;(< group.colonies.size 30)
                                            (> (Math.random) 0.999)
                                            ;;)
                                            (.*form-new-colony this)))
                        (if (.*has-discovered-food  this )
                         (.*eat this )))
                      (.*die this))
                  (var v (/ this.life Ant.life))
                  (.emit this.seeking this.pos this.seeking.weights
                         (* (gene this rate)
                            v) 1)))


(export Ant)

(import (Event-emitter) "events")
(specify Colony (extend Entity-group)
         (property colonies (new Set) )
         (property entity-type Ant)
         (property id 0)

         (init (nest color goals (decay 0.0001) colonies

                     (food-weights ((create Pheremones) color decay ))

                     (mating-weights ((create Pheremones) (color color.red color.green 255) decay ))
                     (event (new Event-emitter))
                     (ants []))
               (assign this.id (++ Colony.id))
               (Entity-group.init.call this)

               (.add colonies this))

         (generic spawn (fluent mth) (genetics color entity-type)
                  (let rx (ternary (= (random-bit) 1) 1 -1))
                  (let ry (ternary (= (random-bit) 1) 1 -1))

                  (let ent (.spawn entity-type
                                   (+ this.nest.x (random-int 1 30) )
                                   (+ this.nest.y (random-int 1 30) )
                                   color
                                   genetics
                                   ))

                  (when ent
                    (assign ent.group this)
                    (assign ent.seeking this.food-weights)
                    (this.add ent)
                    (.push this.ants ent)
                    (assign ent.nest this.nest)
                    (.emit this.event "spawn" ent)
                    (.mutate ent )
                    ent))

         (generic serialize (mth) (ants)
                  (JSON.stringify (map (.to-array ants) (ant) (.serialize ant))))

         (gmth load (path)
               (call-node-back fs.read-file path ))
         (gmth save (path)
               (macro call-node-back (func ...args)
                      `(make-promise (.apply @func  this [

                                             ...@args

                                             (=> (err value )
                                                 (if err (fail err) )
                                                 (success value)) ])))

               (call-node-back fs.write-file path (.serialize this))
               )

         (generic update (mth) (entities weights decay mating-weights food-weights)
                  "Process the movement of ever ant in a set of ants, updating weights along the way."
                  ;;(let has (R.invoker 1 "has"))
                  ;;(assign this.ants ((R.pipe (R.filter (has R.__ entities)) (R.map update)) this.ants))

                  (let update (=> (ant) (.update ant ) ant))
                  (let has (=> (entities) (=> (ant) (.has this.entities ant))))

                  (assign this.ants (pipe
                                     this.ants
                                     (.each  update)
                                     (.filter  (has entities))))

                  (when (= this.entities.size 0)
                    (.emit this.event "extinct" this)
                    ;; remove this and the calls on pheremons to disable displaying weights
                    ;; (.remove sim.layers this.layer)
                    (.delete this.colonies this))))
(export Colony)

