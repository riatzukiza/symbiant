(import ( create extend mixin) "./util")
(import (Event-emitter) "events")

(const fs (require "browserify-fs"))

(import (Matrix) "./matrix" )
(import (Entity) "./entity" )
(import (Layers) "./webgl-layer" )
(type Location (init (x y (layers []))))
(specify Simulation (extend Event-emitter.prototype)
         ;; This part of the program should just be
         ;; a top level object which manages communications between
         ;; other systems.
         ;; It should contain *well known* variables.
         (init (fps width scale (state false)
                    (layers (.setBG-color (new Layers (.get-element-by-id document "stage") "gl" width scale)))
                    (coord (.dmap ((create Matrix) [] width width) (lambda (nil x y) ((create Location) x y ))))
                    (systems (new Set))
                    (rate (/ 1000 fps))
                    (ticks 0)
                    (sim this))
               (Event-emitter.call this))
         (generic use (fluent mth) (color system entity )
                  (.systems.add this ((create system) this entity color)))
         (generic delete (fluent mth) ())
         (generic has (fluent mth) ())
         (generic start (fluent mth)()
                  (assign this.state true)
                  (assign this.previous (Date.now))
                  (this.tick))
         (generic toggle (fluent mth) ()
                  (assign this.state (not this.state))
                  (when this.state (.start this)))
         (generic stop (fluent mth) () (assign this.state false))

         (generic  tick (fluent mth)(previous rate)
                   (when this.state
                     (let now (Date.now))
                     (assign this.elapsed (- now previous))
                     (window.request-animation-frame (-> (this.tick  )))
                     (when (> this.elapsed rate)
                       (++ this.ticks)
                       (assign this.previous (- now (mod this.elapsed rate)))
                       (this.emit "tick" now this.ticks))))
         (generic save (fluent mth) ())
         (generic load (fluent mth) (cb) (cb this)))
(export Simulation)
