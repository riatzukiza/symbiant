(type Life
      (generic *has-discovered-food (mth) ( goals collision ant)
               (let true? false)
               (area  collision spot ant 5
                      (when (and  (.has goals spot) (< this.life 1000))
                        (.delete goals spot)
                        (.set collision x y empty)
                        (assign true? true))) true?)
      (generic *eat (mth) ( weights ant)
               (assign ant.life (+ ant.life Ant.life))
               (let emission (* (gene ant rate) (gene ant find-rate) (/ ant.life Ant.life)))
               (.emit Weight-field ant weights  emission 120))
      (generic *reproduce (mth) (nest ant weights )
               (print "ant is making babies" )
               (assign ant.life (/ ant.life 2))
               (.mutate ant )
               (.spawn ant ant.x ant.y)
               (.spawn ant (+ 1 ant.x) (+ 1 ant.y)    )
               (.emit Weight-field ant weights (*   (gene ant rate) (/ ant.life Ant.life)) 120))
      (generic *die (mth) ( weights ant ants collision)
               (.delete ants ant)
               (.set collision ant.x ant.y empty)
               (.emit Weight-field ant weights (* -1 (gene ant rate)  (/ ant.life Ant.life)) 120))
      (generic *sated (mth) (nest  (ant this))
               (> ant.life Ant.life) )
      (generic *near-nest (mth) (nest ant collision)
               (area-has 10 spot ant collision (and (= nest.x x) (= nest.y y)))))
