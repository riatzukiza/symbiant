(import (Layers) "./webgl-layer" )
(import (Matrix) "./matrix" )
(import ( create extend mixin) "./util")

(let width 250)
(let scale 5)
(type Location (init (x y (layers []))))
(type Collision
      (init ((entities (new Map) ) coord))
      (generic serialize (mth) (entities)
               (map (.to-array entities) (ent) (.serialize ent)))
      (generic move (mth) (entities)
               (.delete entities this.pos)
               (.set entities ent.pos ent))
      (generic check (mth) (x y coord )
               (this.has (.get coord x y)))
      (generic set (mth) (pos ent entities)
               (.set entities pos ent))
      (generic has (mth) (pos entities)
               (.has entities pos)))
(let layers (.setBG-color (new Layers (.get-element-by-id document "stage") "gl" width scale)))
(type Rendering
      (property layers layers)
      (property entities (.get layers))
      (property weights []))
(type World
      (property collision ((create Collision)))
      (property roord  (.dmap ((create Matrix) [] width width) (lambda (nil x y) ((create Location) x y ))))
      (property rendering Rendering)
      (property entities (new Set))
      (property width width)
      (property scale scale)
      (init (collision  coord gl-layer))
      (gmth add (ent rendering collision coord entities)
            (.add rendering.entities ent)
            (.add entities ent)
            (.set collision ent.pos ent))
      (gmth update (entities)
            (print this.rendering)
            (each entities (ent) (.update ent))))

(export World)
