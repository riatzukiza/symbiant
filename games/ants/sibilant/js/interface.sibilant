(include "./macros/jquery")
(import-namespace jquery)

(import-namespace defs)
(import-namespace js)

(macro describe-table ( describers ...body)
       (const [eachable each-args table-data container]
              describers.contents)
       `(scoped (var table ($ "<table>"))

                (let header-row ($ "<tr>"))
                ...@(map (content-of table-data) (entry)
                         `(.append header-row
                                   (.text ($ "<th>" )
                                          (quote @(if (literal? entry)
                                                      entry
                                                      (first entry.contents))))))

                (.append table header-row)
                (each @eachable @each-args

                      (var row ($ "<tr>" ))
                      ...@(map (content-of table-data) (entry)
                               `(let @(ternary (literal? entry)

                                       entry
                                       (first entry.contents))

                                  (scoped
                                   (let col-data (.text ($ "<td> " )
                                                        @(if (literal? entry)
                                                             entry
                                                             (second entry.contents))))
                                   (.append row col-data) col-data)))
                      (.append table row)

                      ...@body)
                (.append @container table)))
(import ( create extend mixin) "./util")
(const $ (require "jquery/dist/jquery.min.js"))

(let context ($ "#container"))

(import (emit-pheremones Ant ) "./ant")
(import (Colony) "./colony")

(def interface (sim)

  (div interface-container {}
         (panel colonies
                (describe-table (Colony.colonies (c) ( (numbers c.ants.size)) here)

                       (.css name "color" (+ "rgb(" (.join [c.color.red c.color.green, c.color.blue] ",") ")"))

                       (on sim "tick" () (.text numbers c.ants.size))))

         )
  context)
(export interface)
