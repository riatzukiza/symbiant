(let toroidial (=> (a lim) (mod (+ a lim) lim)))

;; Yes, I realize I am not following the ECS thing very precisely, I don't care.
;; pretty sure this works though, this isn't the typical type of game I don't think.
;; more like a particle simulation. Maybe I should name them that way, but ehhh...
;; Systems are sets of related entities. Systems should be responsible for creation
;; and destruction of their members, as well as passing data around between the.

(type System

      (init (entities ))
      (generic serialize (mth) (entities)
               (map (.to-array entities) (ent) (.serialize ent)))
      (generic save (mth) (members))

      (generic load (mth) (path))

      (generic move (mth) (entities  )
               (.each entities (=> (ent) (.move ent )))))

(type Entity
      (init (pos color coord (ent this)))
      (generic load (mth) ())
      (generic spawn (mth) (x y goals coord layer  color)
               (let ent (.get coord x y))
               (let data { &x &y
                 r : color.red
                 g : color.green
                 b : color.blue
                 a : 255 })
               (layer.add  data)
               (goals.add ent))
      (generic move (mth) (x y coord (ent this))
               (assign ent.pos (.get coord x y))))
(export Entity)
