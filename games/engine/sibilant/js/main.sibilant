(namespace engine-tests)
(include "kit/header" )
(import-namespace kit)
(include "kit-interface/header" )
(set global
     'mixin mixin
     'create create
     )
(import-namespace interface)
(def-lit-macro define (name parent ...body)
               `(property @name
                          (.define @parent (quote @name)
                                   (lit ...@body))))
(include "kit-html/src/dom")

(def-lit-macro def-curried (name args ...body) `(property @name (R.curry (lambda @args ...@body))))


(require! (lit Tree-map) "tree-kit")
(macro in (  o k) [k " in " o])

(macro sprint (...args) `(print ...@(Array.bind args (=> (a) [`(quote @a) a]))))

(macro set-globals (...body) `(mixin (lit ...@body) global))

(macro fluently (...body) `(scoped ...@body))

(macro accumulate (name ...body) `(assign @name (pipe @name ...@body)))




(macro remember (m k ...body)
       `(if (.has @m @k)
            (.get @m @k)
            (do (var r (scoped ...@body))
                (.set @m @k r) r)))

(macro collect (name value ...body)
       `(.call (lambda (@name) ...@body @name) this @value))

(macro array-of (size ...body)
       `(collect array []
                 (do-times @size (.push array (scoped ...@body)) array)))

(macro fourth (a) `(get @a 3))

(def-lit-macro gett-tuple (name ...keys)
               `(gett @name [...@(.map keys (=> (k) `(get this @k)))]))

(import-namespace dom)
(macro def-entity (name args ...body)
       `(def @name @args
             (var entity (.spawn game.ent [...@(.map body (#-> (get 'contents) first))]))

             ...@(.map body (=> ((lit (contents [component (dots props)])))
                                `(set (.get game.systems @component entity)

                                      ...@props)))
             entity))

;; (include "../inc/electron"
;;          "../inc/docs")

;; (assign module.filename (Path.join (process.cwd) "./tests/dot.sibilant"))

(require! (lit Game) "sibilant-game-engine/client/game"
          (lit Rendering) "sibilant-game-engine/client/systems/rendering/rendering"
          (lit Dot) "sibilant-game-engine/client/systems/rendering/dot"
          (lit Position) "sibilant-game-engine/client/systems/position"
          (lit Velocity) "sibilant-game-engine/client/systems/velocity"
          (lit Physics) "sibilant-game-engine/client/systems/physics"
          (lit Scalar) "sibilant-game-engine/client/math/scalar"

          (lit Collision) "sibilant-game-engine/client/systems/collision"
          (lit Tree-map) "tree-kit")

;; (doc-string "tests.rendering-notes"

;;             "

;;             rendering and rendering context
;;             I have been thinking about rebranding the rendering object, or at least
;;             abstracting away from it through composition, to refer to it as a graphics system.

;;             I'd also like to integrate it more neatly into the concept of a game.
;;             It'd be cool if it were more like: "
;;             (example (with-dom Document-root game))
;;             "I think I can do that if I add a `render()` method to the game object, that produces a document node."
;;             )


(const rendering (.load Rendering
                        (lit (size (.sub Scalar  (window.size) 8))
                             (limit 100)
                             (blend true))))

(.resize rendering (.sub Scalar  (window.size) 4))

(var stage (dom (.div .id 'stage )))


(var container (dom (.div .id "container" rendering.context.canvas)))
(with-dom Document-root (.div .id 'frame container))

(var active-game-systems [Dot Position Physics Velocity Collision])
(var game ((create Game) rendering active-game-systems))

(.start game)

(def entity (aspects ) (.spawn game.ent aspects ))
(def vector2d (x y) [x y])

(def Tree-map.get ((dots args))
     (get (.find this (dots args)) 'value))
(def memoize (f)
     (var cache ((create Tree-map)))
     (=> ((dots args))
         (remember cache args
                   (f (dots args)))))

(var rgba (memoize (=> (r g b a) (lit r g b a))))


(on game.events 'collision ([c c* d])
    (var cv (.get game.systems Velocity c.entity))
    (var c*v (.get game.systems Velocity c*.entity))

    (var cp (.get game.systems Physics c.entity))
    (var c*p (.get game.systems Physics c*.entity))

    (print "before collision")
    (print 'cv.id cv.id )
    (print 'cv.xd cv.xd )
    (print 'cv.yd cv.yd )

    (print 'c*v.id c*v.id )
    (print 'c*v.xd c*v.xd )
    (print 'c*v.yd c*v.yd )

    (var m (/ (* 2 cp.mass) (+ c*p.mass cp.mass)))

    (var m* (/ (* 2 c*p.mass)(+ c*p.mass cp.mass)))
    (var v)

    (set cv
         'xd (* m* (- cv.xd c*v.xd))
         'yd (* m* (- cv.yd c*v.yd)))

    (set c*v
         'xd (* m (+ c*v.xd cv.xd))
         'yd (* m (+ c*v.yd cv.yd)))

    (print "After collision")
    (print 'cv.id cv.id )
    (print 'cv.xd cv.xd )
    (print 'cv.yd cv.yd )

    (print 'c*v.id c*v.id )
    (print 'c*v.xd c*v.xd )
    (print 'c*v.yd c*v.yd )
    )
(do-times 100
          (var dot (entity active-game-systems))

          (set (.get game.systems Dot dot)
               'color (rgba 255 0 0 255))
          (set (.get game.systems Position dot )
               'x (random-int 1 1000)
               'y (random-int 1 1000)
               'z 1
               )


          (set (.get game.systems Physics dot)
               'scale 10
               'mass 10
               'forces [])

          (set (.get game.systems Velocity dot)
               'xd (random-int 1 10)
               'yd (random-int 1 10)))

(let socket (io "/engine"))
(on socket "change" () (print "change ") (.reload location))
