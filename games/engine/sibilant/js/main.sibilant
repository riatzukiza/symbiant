(namespace engine-tests)
(include "kit/header" )
(import-namespace kit)
(include "kit-interface/header" )
(import-namespace interface)

(const socket (io "/engine"))
(on socket "change" () (print "change ") (.reload location))

(set global
     'mixin mixin
     'create create)

(include "kit-html/src/dom")



(require! (lit Tree-map) "tree-kit")
(import-namespace dom)

(def-lit-macro def-curried (name args ...body) `(property @name (R.curry (lambda @args ...@body))))

(def-lit-macro define (name parent ...body)
               `(property @name
                          (.define @parent (quote @name)
                                   (lit ...@body))))

(macro random-sign  ( ) `(if (< (Math.random) 0.5) -1 1))

(macro random-signed (max)
       `(scoped
         (var rand (random-float 0 @max))
         (- @max (* rand 2))))

(macro random-float ( min max) `(+ (* (Math.random) (- @max @min)) @min))



(require! (lit Game) "sibilant-game-engine/client/game"
          (lit Rendering) "sibilant-game-engine/client/systems/rendering/rendering"
          (lit Dot) "sibilant-game-engine/client/systems/rendering/dot"
          (lit Position) "sibilant-game-engine/client/systems/position"
          (lit Velocity) "sibilant-game-engine/client/systems/velocity"
          (lit Physics) "sibilant-game-engine/client/systems/physics"
          (lit Scalar) "sibilant-game-engine/client/math/scalar"
          (lit Component System) "sibilant-game-engine/client/ecs/component"
          noise "./noise"
          Vector "./vector"
          (lit create-vector-field update-particle) "./field"
          (lit List) "sibilant-game-engine/client/data-structures/list"

          (lit Collision) "sibilant-game-engine/client/systems/collision"
          (lit Tree-map) "tree-kit"
          (lit Signal-field) "./forces/signal-field"
          (lit Friction) "./forces/friction"
          (lit target home home-pos next-spawn) "./entities"

          (lit game active-game-systems) "./game"
          config "./config"
          settings "./settings")

(def-generic List.rotate-until (predicate (t 0))
             (if (predicate this.head.item)
                 this.head.item
                 (> t (- this.size 1))
                 (pipe this .rotate (.rotate-until predicate (++ t)))
                 false))





(def vector2d (x y) [x y])










(require "./collision")
(next-spawn)
(print target home home-pos next-spawn)
(.set-bounds Collision (first config.size) (second config.size)
             10
             500)
;; (set Collision
;;      'logging true
;;     )


(.start game)
