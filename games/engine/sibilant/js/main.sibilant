(namespace engine-tests)
(include "kit/header" )
(import-namespace kit)
(include "kit-interface/header" )

(var socket (io "/engine"))
(on socket "change" () (print "change ") (.reload location))

(set global
     'mixin mixin
     'create create
     )
(import-namespace interface)
(def-lit-macro define (name parent ...body)
               `(property @name
                          (.define @parent (quote @name)
                                   (lit ...@body))))
(include "kit-html/src/dom")

(def-lit-macro def-curried (name args ...body) `(property @name (R.curry (lambda @args ...@body))))


(require! (lit Tree-map) "tree-kit")
(macro in (  o k) [k " in " o])

(macro sprint (...args) `(print ...@(Array.bind args (=> (a) [`(quote @a) a]))))

(macro set-globals (...body) `(mixin (lit ...@body) global))

(macro fluently (...body) `(scoped ...@body))

(macro accumulate (name ...body) `(assign @name (pipe @name ...@body)))

(macro remember (m k ...body)
       `(if (.has @m @k)
            (.get @m @k)
            (do (var r (scoped ...@body))
                (.set @m @k r) r)))

(macro collect (name value ...body)
       `(.call (lambda (@name) ...@body @name) this @value))

(macro array-of (size ...body)
       `(collect array []
                 (do-times @size (.push array (scoped ...@body)) array)))

(macro fourth (a) `(get @a 3))

(def-lit-macro gett-tuple (name ...keys)
               `(gett @name [...@(.map keys (=> (k) `(get this @k)))]))

(import-namespace dom)
(macro def-entity (name args ...body)
       `(def @name @args
             (var entity (.spawn game.ent [...@(.map body (#-> (get 'contents) first))]))

             ...@(.map body (=> ((lit (contents [component (dots props)])))
                                `(set (.get game.systems @component entity)

                                      ...@props)))
             entity))

;; (include "../inc/electron"
;;          "../inc/docs")

;; (assign module.filename (Path.join (process.cwd) "./tests/dot.sibilant"))

(require! (lit Game) "sibilant-game-engine/client/game"
          (lit Rendering) "sibilant-game-engine/client/systems/rendering/rendering"
          (lit Dot) "sibilant-game-engine/client/systems/rendering/dot"
          (lit Position) "sibilant-game-engine/client/systems/position"
          (lit Velocity) "sibilant-game-engine/client/systems/velocity"
          (lit Physics) "sibilant-game-engine/client/systems/physics"
          (lit Scalar) "sibilant-game-engine/client/math/scalar"
          (lit Component System) "sibilant-game-engine/client/ecs/component"
          noise "./noise"
          Vector "./vector"
          (lit create-vector-field update-particle) "./field"
          ;; (lit Matrix-map) "sibilant-game-engine/client/data-structures/"

          (lit Collision) "sibilant-game-engine/client/systems/collision"
          (lit Tree-map) "tree-kit")

(define Friction Physics.Force
        (def apply (c)
             (var v c.velocity)
             (var collision (.get c.system.process.systems Collision c.entity))
             (unless collision.colliding
                     (incr-by v.xd (* -1 (/ v.xd 16)))
                     (incr-by v.yd (* -1 (/ v.yd 16))))
             ))
(assign global.size window.size)
(print window.size)
(require! config "./config")
(print (window.size))

(print config)

(const rendering (.load Rendering
                        (lit (size config.dimensions)
                             (limit 100)
                             (blend true))))


(var stage (dom (.div .id 'stage )))


(var container (dom (.div .id "container" rendering.context.canvas)))
(with-dom Document-root (.div .id 'frame container))

(var active-game-systems [Dot Position Physics Velocity Collision])
(var game ((create Game) rendering active-game-systems))


(def entity (aspects ) (.spawn game.ent aspects ))
(def vector2d (x y) [x y])

(def Tree-map.get ((dots args))
     (get (.find this (dots args)) 'value))
(def memoize (f)
     (var cache ((create Tree-map)))
     (=> ((dots args))
         (remember cache args
                   (f (dots args)))))

(var rgba (memoize (=> (r g b a) (lit r g b a))))


(on game.events 'collision ([c c* d])
    (var cv (.get game.systems Velocity c.entity))
    (var c*v (.get game.systems Velocity c*.entity))

    (var cp (.get game.systems Physics c.entity))
    (var c*p (.get game.systems Physics c*.entity))

    ;; (print "before collision")
    ;; (print 'cv.id cv.id )
    ;; (print 'cv.xd cv.xd )
    ;; (print 'cv.yd cv.yd )

    ;; (print 'c*v.id c*v.id )
    ;; (print 'c*v.xd c*v.xd )
    ;; (print 'c*v.yd c*v.yd )

    (var m (/ (* 2 cp.mass) (+ c*p.mass cp.mass)))

    (var m* (/ (* 2 c*p.mass)(+ c*p.mass cp.mass)))
    (if (= c.entity target)
        (do

         (var hpos (.get game.systems Position home))

         (set c*v.pos
              'x (+ 30 hpos.x)
              'y (+ 30 hpos.y))

         )
        (= c*.entity target)
        (do

         (var hpos (.get game.systems Position home))
         (set cv.pos
              'x (+ 30 hpos.x)
              'y (+ 30 hpos.y)))
        (not (or (= c.entity home) (= c*.entity home)))
        (do

         (set cv
              'xd (* m* c*v.xd)
              'yd (* m* c*v.yd))

         (set c*v
              'xd (* m cv.xd)
              'yd (* m cv.yd))))


    ;; (set cv.pos
    ;;      'x (-  cv.pos.x (/ cv.xd 3))
    ;;      'y (-  cv.pos.y (/ cv.yd 3)))

    ;; (set c*v.pos
    ;;      'x (-  c*v.pos.x (/ c*v.xd 3))
    ;;      'y (-  c*v.pos.y (/ c*v.yd 3)))

    ;; (set cv
    ;;      'xd c*v.xd
    ;;      'yd c*v.yd)

    ;; (set c*v
    ;;      'xd cv.xd
    ;;      'yd cv.yd)

    ;; (print "After collision")
    ;; (print 'cv.id cv.id )
    ;; (print 'cv.xd cv.xd )
    ;; (print 'cv.yd cv.yd )

    ;; (print 'c*v.id c*v.id )
    ;; (print 'c*v.xd c*v.xd )
    ;; (print 'c*v.yd c*v.yd )
    )
;; (const Pheremones (create-field ))
(def ant ())
(def plant ())
(def nest ())
(def colony ())

(define SignalField Physics.Force

        (field (create-vector-field config.columns
                                    config.rows))

        (layer (create-vector-field config.columns
                                    config.rows))

        (def-generic apply (c, field, layer)
                     (var v c.velocity)
                     (var collision (.get c.system.process.systems Collision c.entity))
                     (unless collision.colliding
                             ;; (print "woosh", v, field, layer)
                             (update-particle v v.pos, field, layer))))

(var home (entity [Dot Position Physics Collision]))

(set (.get game.systems Dot home)
     'color (rgba 0 255 0 255))

(set (.get game.systems Position home )
     'x (random-int 1 (first config.dimensions))
     'y (random-int 1 (second config.dimensions))
     'z 1)

(set (.get game.systems Physics home)
     'scale 30
     'mass 1
     'forces [])

(set (.get game.systems Collision home)
     'type 'static)

(var target (entity [Dot Position Physics Collision]))

(set (.get game.systems Dot target)
     'color (rgba 0 0 255 255))

(set (.get game.systems Position target )
     'x (random-int 1 (first config.dimensions))
     'y (random-int 1 (second config.dimensions))
     'z 1)

(set (.get game.systems Physics target)
     'scale 30
     'mass 1
     'forces [])

(set (.get game.systems Collision target)
     'type 'static)

(do-times 80
          (var dot (entity active-game-systems))

          (set (.get game.systems Dot dot)
               'color (rgba 255 0 0 255))
          (var home-pos (.get game.systems Position home))
          (set (.get game.systems Position dot )
               'x (+ home-pos.x (random-int 1 500))
               'y (+ home-pos.y (random-int 1 500))
               'z 1)


          (set (.get game.systems Physics dot)
               'scale 10
               'mass 1
               'forces [SignalField, Friction])

          (var dot (entity active-game-systems))

          (set (.get game.systems Dot dot)
               'color (rgba 255 0 0 255))

          (set (.get game.systems Position dot )
               'x (+ home-pos.x (random-int 1 500))
               'y (+ home-pos.y (random-int 1 500))
               'z 1)


          (set (.get game.systems Physics dot)
               'scale 10
               'mass 1
               'forces [SignalField, Friction])

          (var dot (entity active-game-systems))

          (set (.get game.systems Dot dot)
               'color (rgba 0 0 0 255))
          (set (.get game.systems Position dot )
               'x (+ 200 (random-int 1 (/ (first config.dimensions) 1)))
               'y (+ 200 (random-int 1 (/ (second config.dimensions) 1)))
               'z 1)


          (set (.get game.systems Physics dot)
               'scale 20
               'mass 10
               'forces [Friction])

          ;; (set (.get game.systems Velocity dot)
          ;;      'xd (random-int 1 10)
          ;;      'yd (random-int 1 10)
          ;;      )
          )





(.start game)
