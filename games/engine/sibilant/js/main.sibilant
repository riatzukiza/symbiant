(namespace engine-tests)
(include "kit/header" )
(import-namespace kit)
(include "kit-interface/header" )
(import-namespace interface)

(const socket (io "/engine"))
(on socket "change" () (print "change ") (.reload location))

(set global
     'mixin mixin
     'create create)

(include "kit-html/src/dom")



(require! (lit Tree-map) "tree-kit")
(import-namespace dom)

(def-lit-macro def-curried (name args ...body) `(property @name (R.curry (lambda @args ...@body))))

(def-lit-macro define (name parent ...body)
               `(property @name
                          (.define @parent (quote @name)
                                   (lit ...@body))))

(macro random-sign  ( ) `(if (< (Math.random) 0.5) -1 1))

(macro random-signed (max)
       `(scoped
         (var rand (random-float 0 @max))
         (- @max (* rand 2))))

(macro random-float ( min max) `(+ (* (Math.random) (- @max @min)) @min))



(require! (lit Game) "sibilant-game-engine/client/game"
          (lit Rendering) "sibilant-game-engine/client/systems/rendering/rendering"
          (lit Dot) "sibilant-game-engine/client/systems/rendering/dot"
          (lit Position) "sibilant-game-engine/client/systems/position"
          (lit Velocity) "sibilant-game-engine/client/systems/velocity"
          (lit Physics) "sibilant-game-engine/client/systems/physics"
          (lit Scalar) "sibilant-game-engine/client/math/scalar"
          (lit Component System) "sibilant-game-engine/client/ecs/component"
          noise "./noise"
          Vector "./vector"
          (lit create-vector-field update-particle) "./field"
          (lit List) "sibilant-game-engine/client/data-structures/list"

          (lit Collision) "sibilant-game-engine/client/systems/collision"
          (lit Tree-map) "tree-kit")

(def-generic List.rotate-until (predicate (t 0))
             (print "LIST ROTATING", t, predicate, this)
             (if (predicate this.head.item)
                 this.head.item
                 (> t (- this.size 1))
                 (pipe this .rotate (.rotate-until predicate (++ t)))
                 false))


(assign global.size window.size)
(print window.size)
(require! config "./config")
(print (window.size))

(print config)

(const rendering (.load Rendering
                        (lit (size config.dimensions)
                             (limit 100)
                             (blend true))))


(var stage (dom (.div .id 'stage )))


(var container (dom (.div .id "container" rendering.context.canvas)))
(with-dom Document-root (.div .id 'frame container))

(var active-game-systems [Dot Position Physics Velocity Collision])
(var game ((create Game) rendering active-game-systems))


(def entity (aspects ) (.spawn game.ent aspects ))
(def vector2d (x y) [x y])

(def Tree-map.get ((dots args))
     (get (.find this (dots args)) 'value))
(def memoize (f)
     (var cache ((create Tree-map)))
     (=> ((dots args))
         (remember cache args
                   (f (dots args)))))

(var rgba (memoize (=> (r g b a) (lit r g b a))))


(require "./collision")



(var home (entity [Dot Position Physics Collision]))
(var home-pos (.get game.systems Position home))

(set (.get game.systems Dot home)
     'color (rgba 0 255 0 255))

(set (.get game.systems Position home )
     'x (random-int 1 (first config.dimensions))
     'y (random-int 1 (second config.dimensions))
     'z 1)

(set (.get game.systems Physics home)
     'scale 30
     'mass 1
     'forces [])


(var target (entity [Dot Position Physics Collision Velocity]))

(set (.get game.systems Dot target)
     'color (rgba 0 0 255 255))

(set (.get game.systems Position target )
     'x (random-int 1 (first config.dimensions))
     'y (random-int 1 (second config.dimensions))
     'z 1)

(set (.get game.systems Physics target)
     'scale 40
     'mass 10000
     'forces [Friction])

;; (set (.get game.systems Velocity target)
;;      ;; 'xd (random-signed 10)
;;      ;; 'yd (random-signed 10)
;;      )

;; (set (.get game.systems Collision target)
;;      'type 'static)

(const ants [])
(def spawn-ant ([x, y], home, starting-life)
     (var ant (entity active-game-systems))
     (.push ants ant)
     (print ant)

     (set (.get game.systems Dot ant)
          'color (rgba 255 0 0 255))


     (set (.get game.systems Position ant )
          'x x
          'y y
          'z 1)


     (set (.get game.systems Physics ant)
          'scale 10
          'mass 1
          'forces [SignalField, Friction])
     (var v (.get game.systems Velocity ant))

     (.accelerate v [(random-signed config.spawn-static),(random-signed config.spawn-static)])
     ant)

(var home-pos (.get game.systems Position home))
(var number 1)
(var next-spawn (=> () (unless (>= ants.length config.ant-limit)
                            (spawn-ant [home-pos.x home-pos.y] home)
                            (set-timeout next-spawn config.spawn-rate))))
(def clear-ants ()
     (print "clearning ants" ants)
     (each ants (ant) (.despawn ant))
     (assign ants []))
(next-spawn)







(.start game)
(var settings (Quick-settings.create))
(.addRange settings "Angle Zoom" 1 9999 config.angle-zoom 1 (=> (val) (assign config.angle-zoom val)))
(.addRange settings "Noise Z" 1 9999 config.noise-z 1 (=> (val) (assign config.noise-z val)))
(.addRange settings "Noise Force" 1 9999 config.field-force 0.1 (=> (val) (assign config.field-force val)))
(.addRange settings "Signal Decay" 0 99 config.decay 0.1 (=> (val) (assign config.decay val)))
(.addRange settings "Max P Vector Length"  0 99 config.max-length 0.1 (=> (val) (assign config.max-length val)))
(.addRange settings "Max Trail" 10 999 config.max-trail 1(=> (val) (assign config.max-trail val)))
(.addRange settings "Min Trail" 10 99 config.min-trail 1 (=> (val) (assign config.min-trail val)))

(.add-boolean settings "Decay on collision"  config.decay-on-collision (=> (val) (assign config.decay-on-collision val)))
(.add-boolean settings "Limit the number of decay blocks per cycle"   config.limit-decay (=> (val) (assign config.limit-decay val)))

(.addRange settings "Ant Influence" 0 99 config.ant-influence 1 (=> (val) (assign config.ant-influence val)))
(.addRange settings "friction" 2 128 config.friction 1 (=> (val) (assign config.friction val)))
(.addRange settings "Collision Static" 0 99 config.collision-static 1 (=> (val) (assign config.collision-static val)))
(.addRange settings "Spawn Static" 1 99 config.spawn-static 1 (=> (val) (assign config.spawn-static val)))
(.addRange settings "Spawn Rate" 1 99999 config.spawn-rate 1 (=> (val) (assign config.spawn-rate val)))
(.add-button settings "Clear ants" clear-ants)
