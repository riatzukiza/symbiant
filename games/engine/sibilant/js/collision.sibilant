(require! (lit game) "./game"

          (lit Physics) "sibilant-game-engine/client/systems/physics"

          (lit Velocity) "sibilant-game-engine/client/systems/velocity"
          (lit Collision) "sibilant-game-engine/client/systems/collision"
          (lit home home-pos target) "./entities"
          (lit update-particle) "./field"
          (lit Signal-field) "./forces/signal-field"
          Tone "tone"
          config "./config")

(const synth (.to-destination (new Tone.Synth)))
(on game.events 'collision ([c c* d])
    (var cv (.get game.systems Velocity c.entity))
    (var c*v (.get game.systems Velocity c*.entity))

    (var cp (.get game.systems Physics c.entity))
    (var c*p (.get game.systems Physics c*.entity))

    (print "collision event" c c* d
           Collision.quads
           (lit home home-pos target))



    (if (= c.entity c*.entity)
        (do (print "something thinks its colliding with its self"))
     ;; (or (= c.entity home)
     ;;     (= c*.entity home))
     ;; (do (print "something collided with home" c.entity c*.entity))
     ;; (or (and (= c.entity home)
     ;;          (= c*.entity target))

     ;;     (and (= c*.entity home)
     ;;          (= c.entity target)))

     ;; (do (print "target colliding with spawn"))

     (= c.entity target)
        (do
         (synth.trigger-attack-release "C4" "4n")
         ;; (print "ant found target")
         ;; (alert "ant found target")

         ;; (.accelerate cv [(random-signed (or (* (+ 1 c*v.xd) config.collision-static)
         ;;                                     config.collision-static)),
         ;;                   (random-signed (or (* (+ 1 c*v.yd) config.collision-static)
         ;;                                      config.collision-static))])

         (update-particle c*v c*v.pos, Signal-field.field,
                          Signal-field.layer
                          game.ticker.ticks
                          true
                          true
                          home-pos
                          )

         (set c*v.pos
              'x  home-pos.x
              'y home-pos.y)


         (.accelerate c*v [(random-signed config.collision-static),(random-signed config.collision-static)])
         )
        (= c*.entity target)
        (do

         (synth.trigger-attack-release "C4" "8n")
         (print "ant found target")
         ;; (alert "ant found target")
         ;; (.accelerate c*v [(random-signed (or (* (+ 1 cv.xd) config.collision-static)
         ;;                                     config.collision-static)),
         ;;                   (random-signed (or (* (+ 1 cv.yd) config.collision-static)
         ;;                                      config.collision-static))])




         (update-particle cv cv.pos, Signal-field.field,
                          Signal-field.layer
                          game.ticker.ticks
                          true
                          true
                          home-pos)
         (set cv.pos
              'x  home-pos.x
              'y home-pos.y)

         (.accelerate cv [(random-signed config.collision-static),(random-signed config.collision-static)])
         )

        (not (or (= c.entity home) (= c*.entity home)
                 (= c.entity target) (= c*.entity target)))
        (do
         (print "ant is colliding with another ant")
         ;; (synth.trigger-attack-release "A3" "64n")

         (.accelerate cv [(random-signed config.collision-static),(random-signed config.collision-static)])
         (.accelerate c*v [(random-signed config.collision-static),(random-signed config.collision-static)])

         (update-particle c*v c*v.pos, Signal-field.field,
                          Signal-field.layer
                          game.ticker.ticks
                          config.decay-on-collision
                          false
                          false
                          home-pos)

         (update-particle cv cv.pos, Signal-field.field,
                          Signal-field.layer
                          game.ticker.ticks
                          config.decay-on-collision
                          false
                          false
                          home-pos)
         ))

    (assign c*.colliding false)
    (assign c.colliding false)
    )

