
(require! (lit Position) "sibilant-game-engine/client/systems/position"
          (lit Physics) "sibilant-game-engine/client/systems/physics"
          (lit create-vector-field update-particle) "../field"
          (lit Collision) "sibilant-game-engine/client/systems/collision")

(require! config "../config"
          (lit game) "../game"
          entities "../entities")

(define SignalField Physics.Force
        (field (create-vector-field config.columns
                                    config.rows))

        (layer (create-vector-field config.columns
                                    config.rows))

        (def-generic apply (c, field, layer)
                     (var v c.velocity)
                     (var collision (.get c.system.process.systems Collision c.entity))
                     (unless collision.colliding
                             (update-particle v v.pos, field, layer game.ticker.ticks
                                              false
                                              false
                                              entities.home-pos)
                             (var win-rate (/ v.win-count (or (+ 1 v.loose-count)
                                                              1
                                                              )))
                             (assign c.scale (* 10 (if (> win-rate 1)
                                                       win-rate 1)))
                             (set c.pos
                                  'x (Math.round c.pos.x)
                                  'y (Math.round c.pos.y)
                                  )
                             )))

(export SignalField)
