(include "./deps")



(import-namespace defs)
(import-namespace js)


;; Libs
(import ( create extend mixin) "./util")
(const $ (require "jquery/dist/jquery.min.js"))
;; Globals
(import (World) "./systems/world")
(import (Simulation) "./simulation")

(Simulation let sim (120 240 3))

(macro gett (name ...body)
       ["get " `(mth @name () ...@body)])

(macro sett (name val ...body)

       ["set " `(mth @name (@val) ...@body)])

(macro import (thing from) `(const (literal ...@(content-of thing)) (require @from)))
(macro area-has (diameter spot center area cond)
       `(scoped (let true? false)
           (area  @area @spot @center @diameter
                  (when @cond (assign true? true)))

                true?))
(macro gene (ent value)
       `(get @ent (quote genetics) (quote @value)))
(macro mutate (ent values)
       (map (content-of values) (value)
            `(assign (get @ent (quote genetics) (quote @value))
                  (+ (get @ent (quote genetics) (quote @value))
                     (random-signed (get @ent (quote genetics) (quote mutation-factor)))))))
(macro random-bit () `(Math.round (Math.random)))

(macro collide (ent ...body) `(if (or (not @ent) (= @ent empty) (= @ent 0))
                                  (do ...@body)))

(macro genetics (assigner ...props)
       `(@assigner genetics (p-map ...@(map props (p)

                                   (if (literal? p) `( @p (random-float 0 0.5))
                                       `( @(first (content-of p))
                                           @(second (content-of p))))))))



(macro member (name value)
       `(set this (quote @name) @value))

(let socket (io "/wip"))
(on socket "change" () (print "change ") (.reload location))




(assign global.sim sim)
(type Rendering
      )
(assign global.world ((create World) sim.coord
                                     {
                                     entities (.get sim.layers)
                                     weights []
                                     }))

;; Types
(import (Entity) "./ecs/entity")
(import (Entity-group) "./ecs/group")
(import (Colony) "./entities/ant")
(macro color (r g b)
       `(p-map (red @r) (green @g) (blue @b)))
;;(import (Entity) "./ecs/entity")
;; Organization is critical, I have code duplicated all over the place, what can I do to fix this?
;; one thing, I can break down these functions into smaller functions and attempt to observe where patterns emerge.
;; I need to keep the hand written js files seperate from the results of the compiler so I can better manage them.

(let green (color 0 255 0))
(let yellow { red 255 green 255 blue 0 })
(import (interface) "./interface")


(def Map.prototype.each (f)
  (.for-each this f) this)

(generic save (def) (path components)
      (save-json-file path components))

(require! R "ramda")
(let set-value (R.curry (=> (value entity) (assign entity.value value))))

(def-promised load-json-file (path)
  ()
  )

(generic load (def) (path (entity this))

  (pipe (load-json-file path)
        (.then (set-value _ entity))))

(def start (sim)
  (on (sim.start) "tick" (now ticks)
      (every 60 ticks (.update plants))

      (do-times 1 (each Colony.colonies (col) (.update col)))
      (pipe sim.layers
            (.update )
            (.render))))
(.load sim  start)
