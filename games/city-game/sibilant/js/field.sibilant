(var  fields [])

(specify Field-system (extend Matrix ))


(var state-space (create State-space))

(type Component)

(def-description Component (x y (neiborhood (moore x y this.field)))
  (gett influences (pipe this.system.influences
                         (.map  (=> (s) (.get s.field this.x this.y)))))
  (gett value (.get this.field this.x this.y))
  (sett value v (.set this.field this.x this.y v))
  (def-generic update (ticks x y value field)
    ;;(if (= value 1) (print "updaing collision field component" x y value))
    (.set field x y value))
  )

(def-description Field-system
    (name
     (render? false) height width

     (symbol (Symbol name))

     (field (state-space width height))

     (components [])
     ;; collection of systems whos values influence this one

     (layer (if render? (.get sim.layers) (new Set)))

     (system this)
     (*Component (extend  this Component )))

  (init (.push systems this))

  (gett Component this.*Component)
  (doc "A quantity which has a value over every point of a global space for all locations in space and time.")
  (height sim.*width)

  (width sim.*width)
  (gett array this.components))

(def-generic  Field-system.populate (field )
  "for every value influenced by the field, create a point object to represent that value"

  (pipe field (each (v x y) (.add-component this x y v)))) 

(def-generic Field-system.clear (field components)
  (.transit field (=> (x) 0))
  (.update field)
  (.transit field (=> (x) x))
  (.update field))

(def-generic Field-system.add-component ( x y value *Component layer components)

  (var component ((create *Component) x y ))

  (.push components component)
  (.add layer component)
  component)

(def-generic Field-system.remove-component (x y layer components)

  (.filter components (=> (c)
                          (if (not (= c.x x) (c.y y))
                              (do (.delete layer c) false)
                              true)))

  )

(def-generic Field-system.update (ticks components field )
  "update every component of the field."

  (pipe components (each (c) (.update c ticks)))

  ;; (.update field)

  )
(def-generic randomize-field (field (system this))

  (.transit field (=> (x) (Math.random)))
  (.update field)

  (.transit field (=> (x) x))
  (.update field)

  (assign system.max 0))

(assign Field-system.randomize randomize-field)

(var field-system (create Field-system))
