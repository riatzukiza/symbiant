


(var queue [] )
(print queue)
(var last-tick-time null)
;; We'll set the frame delay so we get 30 frames per second
(var frame-delay (* 1000 (/ 1 1)))
(print frame-delay)

(def begin-tick (update)

  (->
   (print "updating")

   (var now (Date.now))
   (var time-elapsed (- now last-tick-time))


   (if (and  looping? (>= time-elapsed frame-delay))

       (do (assign last-tick-time now)
           (update)
         (request-animation-frame (begin-tick update)))

       looping?
       (request-animation-frame (begin-tick update)))))

;; starting and stopping are much the same, only there are two variables to keep track of instead of one.
(def start-loop (update )

  (assign last-tick-time (Date.now)
          looping? true)

  (begin-tick update))

(def stop-loop ()

  (assign last-tick-time null
          looping? false))






;; We will start here, explaining the concept from the top down.
;; after the concept is explained, and we are at the bottom, we will build from the bottom up.

;; (def gl-el.onclick (e)
;;   (.prevent-default e)
;;   (let* ((pointer-location (get-relative-pointer-location gl-el e))
;;          (selected-cell (get-cell-coord pointer-location)))
;;     (create-instance-of Particle selected-cell.x selected-cell.y)
;;     ))
