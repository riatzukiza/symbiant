
(type Bounce )

(def-component Bounce ()

  "A collision interaction system, reverses movement upon collision."

  (require-components
   entity

   (Movement
    Direction)


   (var dir Direction.value)

   (if (.has Collision-field [(+ entity.x (first dir)) entity.y ])
       (assign Direction.value [ (first Direction.value) (negate (second Direction.value)) ])
       (assign Direction.value [ (negate (first Direction.value)) (second Direction.value) ]))

   (assign Direction.value (flip Direction.value))))


(type Movement)

(describe Movement
          (sett value value (assign this.*value value))
          (gett value (if this.*value this.*value [this.entity.x this.entity.y])))

(def-component Movement ( (Movement this))
  "A container for future movement positions."

  ;; in the event that there is a collision


  (unless (.move Collision-field Movement.value entity)


    (.update Bounce entity )))

(type Inertia)
(def-component Inertia (value)

  (require-components
   entity

   (Movement
    Direction)

   (assign Movement.value
           [
           (+ entity.x (first Direction.value))
           (+ entity.y (second Direction.value))
           ])))

(type Direction)
(describe Direction
          (value [ 1 1 ]))

(def-component Direction (value (direction this))

  "A vector, determined from speed and movement components."

  (require-components
   entity
   (Movement)

   ;; Could bug out, just flip the order you subtract them in

   (assign this.value
           [

           (- entity.x (first Movement.value))
           (- entity.y (second Movement.value))

           ])))

;; (type Speed )
;; (def-component Speed ()
;;   "A container for the rate of change of position")

;; (def-component Position ())

;; (def-component Color ())
;; (def-component Size ())



;; entity

(type Collision)
(def-description Collision (entity (field-element (.add Collision-field entity.pos)))

  (def-generic update (entity)
    (.move Collision-field entity.pos entity)))

(specify Boundry (extend Entity))
(def-description Boundry (x y components)

  (components [ Collision ])

  (init (.call Entity.init this x y components true)
        (print "Makin boundry at " this.x this.y this.pos)
        )

  (r 255)
  (g 128)
  (b 0)
  (a 255))


(def build-boundries ()

  (for-up-to
   x 100
   (create-instance-of Boundry x 0)
   (create-instance-of Boundry x 99))

  (for-up-to
   y 100
   (create-instance-of Boundry 0 y)
   (create-instance-of Boundry 99 y))

  null)

(specify Particle (extend Entity))

(describe Particle


          (components [


                      Inertia
                      Movement

                      Direction
                      Collision

                      ])

          ;; Meta data
          (r 256)
          (g 256)
          (b 256)

          (a 256))

