(type State-space 
         (init (width height
                      (state (all-zero height width Float32Array)) ;; The current, immutable, state of this section of the simulation.
                      (transition (all-zero height width Float32Array))) ;; The swap space used to generate the next state of the simulation

               ;; After every tick of the simulation, these two values will switch places.
               ;; Doing this saves us creating a new matrix every time.

               )
         )


(generic State-space.resize (def) (w h  c)
         (this.init.call this w h ))

;; Being that this data structure is immutable,
;; getting will always refer to the un changing prior state.

(generic State-space.get (def) (x y state)
         (.get-state this x y state))

(generic State-space.get-state (def) (x y state)
         (.get state x y))

;; except when its not. But that is a whole other basket of worms.
;; it is at least a special case such that it requires a specially labeled name,
;; and not the privledge of "get".
(generic State-space.get-transition (def) (x y transition)
         (.get transition x y))

;; Setting will then refer to modifications to the transition state, the state that will be.

(generic State-space.set (def) (x y value state)

         (this.set-transition x y value ))

;; Same black magic applies here as with get, some times... some times we allow our selves to forget that
;; the state isn't supose to change.
(generic State-space.set-state (def) (x y value state)
         (.set state x y value))

;; But normally we remember this.
(generic State-space.set-transition (def) (x y value transition)
         (.set transition x y value))

;; Simply observe every element of the current state
(generic State-space.each-state (def) (f state)

         (.each state f)

         this)
(generic State-space.each (def) (f state)

         (.each state f)

         this)

;; Transit is the transformation
(generic State-space.transit (fluent def) (f state transition)
         (.transit state transition f))

(generic State-space.each-transition (def) (f transition)

         (.each transition f) this)

(generic State-space.clear (def) (width height)
         (this.clear-transitions)
         (this.clear-states)
         )
(generic State-space.clear-transitions (def) (width height)

         (var r ((create Matrix) [] width height)
              set-transition (-> 0))

         (assign this.transition (.dmap  r set-transition)))

(generic State-space.clear-states (def) (width height)

         (var r ((create Matrix) [] width height)
              set-state (-> 0))

         (assign this.state (.dmap  r set-state)))

;; An update occurs at the end of a transition.
;; Most simply, an update is when the transition matrix is swapped with the state matrix.
;; So an update will occur at the end of every transition
;; Or is an update the application of the systems *rule* through
;; process of transit?

;; Update is the switch between the current "state" to the transitory state.
;; the "swapy thing"
(generic State-space.update (fluent def) (f state transition)
         (assign this.state transition
                 this.transition state))
(export State-space)
