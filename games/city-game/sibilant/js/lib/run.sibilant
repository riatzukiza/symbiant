(const List (require "./list"))
(type Run
      (init (array value start end prev next)
            (if prev (assign prev.next this))
            (if next (assign next.prev this)))

      (generic has (mth) (n)
               ;; (n == 0) == false ;;case where given 0, and the run is negative.
               (= this.value (= n 0)))
      (gmth before? (i start)
            (<= i start))

      (gmth after? (i end)
            (>= i end))

      (gmth between? (i start end)
            (and (>= i start) (<=  i end)))

      (generic each (mth!) (callback start end array)
               (loop (collect r this)
                     (for (var i start) (< start end) (++i))
                     (callback (get array i) i))))

(specify Run-list (extend List)

         (init (array (indexes []))

               (var run ((create Run) array false 0 0 null null))

               (.each array (=> (el i)
                                (if (.has run el)
                                    (assign run.end i)
                                    (do
                                     (assign run ((create Run) array (not run.value) i i run))
                                     (indexes.push run))))))
         (gmth push (v)
               ())
      )
(type Run-indexed-array
      (init (array (indexes []))
            (var run ((create Run) array false 0 0 null null))
            (.each array (=> (el i)
                             (if (.has run el)
                                 (assign run.end i)
                                 (do
                                  (assign run ((create Run) array (not run.value) i i run))
                                  (indexes.push run))))))
      (gmth push (v))
      (gmth pop (v))

      (gmth search (i  (left 0) (right (- indexes.length 1)) (m (Math.floor (/ (+ left right) 2)) indexes))
            (var t (get indexes m))
            (if (.after? t i) (.search this i left (assignment! right (- m 1)))
                (.before? t i) (.search this i (assignment! left (+ m 1) ) right)
                (.between? t i) t
                (throw (new Error "this is not supose to happen, binary search failed fataly"))))

      (gmth set (i v array)
            (var t (search this i))
            (set array i v)
            (if (.has t v)
                (if (= i t.prev.end)
                    (do (-- t.prev.end)
                        (-- t.start))
                    (= i t.next.start)
                    (do (++ t.next.start)
                        (++ t.start)))
                (do (var run ((create Run) array (= v 0) i i t t.next))
                    (assign
                     t.prev.end (- i 1)
                     run.next.start (+ i 1))
                  (if (< run.prev.end run.prev.start)
                      (assign run.prev run.prev.prev))
                  (if (< run.next.end run.next.start)
                      (assign run.next run.next.next)))))
      (gmth get (i))
      (generic each (fluent mth) (f indexes)
               (indexes.each (=> (run) (if run.value (.each run f)))))
      (gmth map (f indexes)))
