
(macro def-curried (name args ...body)
       `(var @name (R.curry (=> @args ...@body))))

(require! "http"
          Future "./lib/common/async"
          R "ramda"
          ;;(literal Trie trie) "../kit/src/collection/trie.sibilant"
          )


(macro resolve-then ( value ...body)
       `(pipe (Promise.resolve @value)
              (then @value ...@body)))

(def write-element-attribute (value key)
  (resolve-then value (.write stream (+ key "=" "'" value "' " ))))

(macro arrow-let (defs ...body)
       ;; clarify this, document or re-write.
       `(let (...@(.map defs.contents (=> (de)
                                          `(@(first de.contents) (=> ...@(rest de.contents)))))) ...@body))
(alias-macro arrow-let =>-let)
(alias-macro arrow-let flet)

(type Html-element

      (getter body () this.*body)
      (getter stream () ((create Promise-writer) this.*stream))
      (getter promise () this.*promise)

      (init ((name "")
             (attributes {})
             (*body [])
             *stream
             (*promise (Promise.resolve)))))
(var html-element (create Html-element))

(macro infix-assignment-string (key value)
       `(+ @key "=" "'" @value "' " )
       )
(def-curried render-element-attribute (value key stream)
  "given a key and a value, render the attribute string fragment"
  (.write stream (+ " " (infix-assignment-string key value) )))

(generic Html-element.render (def) (stream name  attributes body)
         "Write an html document fragment to a stream, and its content. Content can be a string, promise, or a renderable. "
         ;; Ata this.
         (flet ((render-element-attribute (value key)
                  "given a key and a value, render the attribute string fragment associated to the given stream"
                  (.write stream (+ " " key "=" "'" value "' " )))
                (render-child-segment (segment)
                  "Function that is to be called for each segment of the stream, calls the render method of the segment
if it has one, otherwise its just written to the stream"
                  (if segment.render (.render segment stream) (.write stream (+ "" segment))))
                (end-opening-tag      ()
                  "insert the end of an opening html tag."
                  (.write stream ">"))
                (render-opening-tag   ()
                  (.write stream (+ "<" name)))
                (render-closing-tag   ()
                  (.write stream (+ "</" name ">"))))

           (flet ((render-attributes ()
                    (pipe (Object.keys attributes)
                          (map (k) (render-element-attribute (get attributes k) k))))

                  (render-children ()
                    (.map body (=> (element) (render-child-segment element)))))

             (render-opening-tag)
             (render-attributes)
             (end-opening-tag)
             (render-children)
             (render-closing-tag))))



(macro dotted? (token) `(= (get @token "type") "dots"))

(alias-macro loop flat-pipe)

(def Array.prototype.each (f)
  (this.for-each f)
  this)



;; element functions are of the form `(f @name {@attributes} [@children])
(macro xml ( element-function root)
       `(@element-function ...@(let ((name `(quote @(first (content-of (first (content-of root))))))
                                     (elements (rest root.contents))
                                     (attributes-list [])
                                     (values []))


                                 (while (> elements.length 0)
                                   (let ((el (.shift elements)))

                                     (if (dotted? el)
                                         (do (.push attributes-list el)
                                             (.push attributes-list (.shift elements)))

                                         (and (expression? el)
                                              (dotted? (first el.contents)))
                                         (.push values `(xml @element-function  @el))

                                         (.push values el))))


                                 [ name  `(hash ...@attributes-list)  `[...@values] ])))
(macro markup (root)
       `(xml Html-element @root))



(macro with-markup-to-stream (stream element)
       `(pipe (markup @element)
              (.render @stream)
              ))

(def render-test-document (res)

  (with-markup-to-stream res
    (.html
     (.head )
     (.body (.h1 "this is a shitty website!")
            (.div  .id "main-container"
                   (.div "yes, yes it is.")

                   (.div (Date.now))

                   (.div "and that was the time."))))))
