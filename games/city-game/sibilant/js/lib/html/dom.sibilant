(include "./macros")
(macro instance-of? (item type)
       ["("  type " " 'instanceof " "item ")"])

(def-curried render-children ( *parent c i a)
  (if (undefined? c) null

      c.render (.render c *parent)

      (array? c) (.each c (render-children *parent))

      (string? c) (.append-child *parent.*node (.create-text-node document c))

      (number? c) (.append-child *parent.*node (.create-text-node document (+ "" c)))

      (function? c) (render-children *parent (c *parent) i a)

      (instance-of? Element c) (let ((node (.wrap Document-node c *parent.*node)))
                                 (set a i node)
                                 (render-children *parent  node i a))

      (.append-child *parent.*node c)))

;; (specify Document (extend Event-emitter.prototype))
;; (def-describe Document (*root *tree))

(specify Document-node (extend Event-emitter.prototype))

(alias-macro def-description def-describe)
(def-describe Document-node
    (tag-name
     attributes
     (*children [])
     *parent

     (*node (document.create-element tag-name)))

  (gett children this.*children)

  (def-generic clear (*node)
    (assign *node.innerHTML ""
            ) this)

  (def-generic render (*parent attributes tag-name *node children)

    ;;(when *node (.remove this *node *parent))
    (assign *node.innerHTML "")
    ;; The first time the parent is right, the next time the parent is somthing else.
    (assign this.*parent *parent)

    (.append-child *parent.*node *node)

    (each attributes (a k) (set *node k a))

    (pipe children (.each  (render-children this)))
    (.emit this 'render )

    this)

  (def wrap (*node *parent)
    "create a Document-node from a native DOM Element"
    ((create Document-node) *node.tag-name {} [] *parent *node))

  (def-generic append (node children)
    "add a child to the bottom of this one"
    (.push children node)
    this)

  (def-generic prepend (node children)
    "add a child to the top of this one"
    (assign this.children [node children]))

  (def-generic remove (*node *parent)
    "remove this element from the tree."

    (.remove *node)

    (.filter *parent.children (=> (c) (not (= *node c))))
    (.emit *parent 'remove *node)
    this))

(specify Document-root (extend Document-node))

(describe Document-root
          (gett *parent this)
          (tag-name "html")
          (*node document.document-element)
          (*children []))
(specify Document-body (extend Document-node))

(describe Document-body
          (gett *parent this)
          (tag-name "body")
          (*node document.body)
          (*children []))

(specify Document-head (extend Document-node))

(describe Document-head
          (gett *parent this)
          (tag-name "head")
          (*node document.head)
          (*children []))




(var create-document-node (create Document-node))


(print document.append-child)





