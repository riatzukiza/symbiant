

(macro of! (assigner name col)
       [ assigner " " name " of " col ])
(macro for! (cond ...body)
       [ "for( "...@(content-of cond) " ) {\n " (indent body)"\n}" ])
(macro def-proto (thing method args ...body)
       `(set (get @thing (quote prototype)) (quote @method) (function @method @args ...@body)))

(macro all-of ( set name ...body) `(for! ((of! var @name @set)) ...@body))

(macro all-must (set var cond)
       `(scoped
         (loop (all-of  @set @var)

               (if (not @cond))

               (return false))
         (return true)))

(macro have (set el) `(.has @set @el))

(def-proto Set is-superset (subset)

  (all-must (have this elem)))

(def-proto Set union (set-b)
  (loop
    (collect union (new Set this))
    (all-of set-b elem (.add union elem))))

(macro maybe-of (set el cond ...body)
       `(all-of @set @el
                (when @cond ...@body)))

(def-proto Set intersection (set-b)
  (loop (collect intersection (new Set))
        (maybe-of set-b elem (.has this elem))
        (.add intersection elem)))

(def-proto Set difference (set-b)
  (loop (collect difference (new Set this))
        (all-of set-b elem)
        (.delete difference elem)))

(def-proto Set to-array ()
  [(dots this)]
  )
