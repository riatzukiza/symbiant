
;; (rename-macro include include-sibilant)
;; (meta
;;  (def sibilant.include (file)
;;    (unless (match-regex? file "\\.(sibilant|son)$")
;;      (assign file (concat file ".sibilant")))

;;    (when (match-regex? file "^\\.\\.?/")
;;      (assign file (path.resolve sibilant.dir file)))

;;    (var resolved-file
;;         (try (require.resolve file)
;;              (error ("Failed to resolve file for inclusion: " file))))

;;    (sibilant.record-dependency sibilant.file file)

;;    (pipe (sibilant {file resolved-file})
;;          (get 'output)))
;;  )

(include "./meta/meta"
         "./meta/macros"
         "./meta/describe.sibilant"
         "./meta/lit-macros"
         )

;;(include "./meta/def-type.sibilant")

(macro dotted? (token) `(= (get @token "type") "dots"))
(macro in? (a b) ["("  b " in " a " )"]) 

(require! (lit create extend mixin cond) "@kit-js/src/util"

          (lit  Event-emitter ) "events"

          (lit Layers) "../js/webgl-layer.js"
          )



(macro def-description (name args ...body)
       "define a type and describe it in a function like syntax. The arguements body is passed to the last instance of the init macro as its argument body."

       (def init-expression? (e) (and (expression? e) (= (get (first e.contents) 'token)  'init)))
       (def describer? (e) (not (init-expression? e)))

       (var init-form (pipe body (.filter  init-expression?)
                            last
                            ))
       (var init-body (ternary init-form (rest init-form.contents) []))

       (var description [ `(init @args ...@init-body)...(pipe body (.filter  describer?))])

       (if (dotted? name)
           `(set Descriptions (quote @name) (mixin (lit ...@description) @name  ))
           `(set Descriptions (quote @name) (mixin (lit ...@description) @name  ))))

(include "./lib/lib")

(include "./simulation.sibilant")
