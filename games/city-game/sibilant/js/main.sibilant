

(include "@kit-js/macros.sibilant")

(import-namespace kit)

(include "./headers")
;; (alias-macro include include-sib)
;; (macro include-js (...paths)
;;        )

(def symbol-to-string (s)
  (second (.match (.to-string s) (regex "Symbol\\((\\w*.)\\)"))))


(var container
     (dom
      (.div .id "container"
            (.h1 "City builder")
            (.div .id "stage"))))


(.render container Document-root)

(var sim ( (create Simulation) 30 100 8))
(assign global.sim sim)

(include "./field.sibilant")

(macro require-components (ent vars ...body)
       `(let (...@(.map vars.contents (=> (v) `(@v (component-of @ent @v)))))
          ...@body))

(macro def-component (name args ...body)
       `(def-description @name (entity ...@(get args 'contents))
          (def-generic update (entity ...@(get args 'contents))
            ...@body)))
(def maybe-num (n)
  (or n 0))

(macro negate (n) ["-" n])

(def flip (d) (map d (v) (negate v)))

(def total (arr)
  "calculate the total sum of all values in an eachable."
  (var sum 0)

  (each arr (v) (incr-by sum v))

  sum)




(def display-stats (field-system)
  "calculate and log the average and total values for all cells in a system."

  (pipe field-system.field
        total
        ((aprint "total" field-system.name))

        (/  (* 100 100))
        ( (aprint "average" field-system.name))))

(def update-entities ()
  "update the state of every entity. Entity updates may affect fields and other systems."

  (each entities (ent)
        (.update ent)))

;; (def update-off-beat-fields (current-system)
;;   "Swap the transition with the state of all field systems except the one currently said to be active."
;;   (pipe systems
;;         (.filter  (=> (s) (not (= s current-system))))
;;         (each (s) (.update s.field))))
(def update-on-beat-field (current-system ticks)

  "calculate the values for the system that is said to currently be active. Systems are updated one
at a time, one per tick,so that updates to each can make changes to each. Values of each system will
be integrated for the time missing between each of their updates."

  (.update  current-system ticks)

  (.update current-system.field))

(def get-onbeat (ticks)
  "return the id of the *onbeat* or major system of the current tick"
  (get systems (mod ticks systems.length) 'symbol))

(def refresh-fields ()
  "update the state matricies of every existing field."
  (each systems (system) (.update system.field )))

(def update-display ()
  (pipe sim.layers
        (.update )
        (.render)))




;; (include "./gl.sibilant")


(include "./game")






(on (.start sim) "tick" (now ticks)


    (update-game ticks))

(include "./interface.sibilant")

