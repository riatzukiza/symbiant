
(include "./game/systems.sibilant")

(each systems (s) (.populate s))
(var entities [])
;;(include "./gl/gl.sibilant")

(include "./game/components.sibilant")
(include "./game/entities")


(def bulk-spawn-entity (T args)
  (each args (a) (create-instance-of T (dots a))))

(def clear-entities ()
  (each entities (e) (.remove e)))

(def out-side-bounds? (e )
  (or (> (get e 'x) 100)
      (> (get e 'y) 100)))

(def update-game (ticks)
  "Gets called every tick of the game, and for every system of the process,
we update its state, and recaculate the values of the current major field."

  (if (.some entities out-side-bounds?)
      (initialize-game))

  (var current-system (get systems (mod ticks systems.length) ))


  (update-on-beat-field current-system ticks)

  (refresh-fields)

  (update-entities)

  (refresh-fields)


  (update-display ))

(include "./game/loop")


;;(start-loop update-game)

(include "./game/starting-entities")
