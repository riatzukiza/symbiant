
(def-type Actor
    (init ((events (new Event-emitter))
           (state {})
           (awaited-responses (indexed-set))))

  (alias event events))

(var handle-incoming-message (R.invoker 1 '*handle-incoming-message))
(var handle-response-message (R.invoker 1 '*handle-response-message))

(def Actor.respond ([msg-id value] event)
  (.emit event "response"
         value))

(def Actor.*handle-response-message ([key-string message]))

(def-generic Actor.ask (message event awaited-responses)
  (.emit event "message" message )
  (.add awaited-responses message))

(def Actor.send (message event)
  (.emit event "message" message))

(def Actor.start (events recieve)
  (pipe events
        (.on  "message" (handle-incoming-message _ this))
        (.on "response" (handle-response-message _ this))))
