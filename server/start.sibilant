(require! "http"  "url" "path")
(include "../../kit/index.sibilant")
(import-namespace kit)
(def-curried call-handler (remaining state )
  (conditional state (-> (<= (-- remaining) state.handlers.length))
               (handler _ (call-handler
                           remaining))
               (-> state.route.parent)
               (=> (state)
                   (let ((new-state (Object.create state)))
                     (assign new-state.route route.parent)
                     (handler new-state (call-handler state.route.parent.handlers.length))))
               ))
(type Route (init (handler node) )
      (mth send (parsed-url [req res state] )
           (.handler this parsed-url [req res state])))
(type Routing-sequence
      (init ((handlers [])
             event
             node))
      (mth send ([req res] [state (default remaining this.handlers.length)])
           (-- remaining)
           (if (>= remaining 0)
               (.call (get this.handlers remaining)

                      state req res state

                      (=> ((default r state))
                          (.send this [req res] [r remaining])))))
      (mth add (f)
           (.push this.handlers f)))
(type Router
      (init ((routes (trie)) (events (new Event-emitter))))
      (mth use (key f)
           (pipe (remember this.routes key (create-instance Routing-sequence ))
                 (.add f)))
      (mth send (url-string [req res] )
           (let* ((parsed-url (.parse url url-string true))
                  ((literal pathname query) parsed-url)
                  (sequence (.split pathname "/"))
                  (route (.find this.routes sequence)))

             (route.send parsed-url
                         [req res
                         (literal req res
                                  (property url parsed-url)
                                  route
                                  pathname
                                  query) ]))))
(type Routing-service
      (init ((router (create-instance Router ))))
      (mth use (key handler)
           (let ((route (.find this.router key)))
             (if route
                 (route.handlers.push handler)
                 (do
                  (.insert this.router key handler)))))
      (mth start ()
           (assign this.server (http.create-server
                                (=> (req res)
                                    (if this.*running
                                        (.send router req.url [req res]))))
                   this.running? true)
           this)
      (mth stop ()))


(.use service "/hello" (=> (req res state)

                           ))
