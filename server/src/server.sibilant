"use strict"
(include "./deps")
(import-namespace defs)
(import-namespace js)


(include "./macros/express.sibilant")
(import-namespace express)

(const http (require "http"))
(const express (require "express"))
(const Path (require "path"))
(const Url (require "url"))
(import (create extend mixin curry) "./lib/util")
(const browserify (require "browserify"))
(import (Directory) "./lib/file-system")
(import (auto-compile) "./compiler")
(import (bulk-bundle) "./bundle")

(const port (or process.env.PORT 8001))
(const app (express))


(const server (http.Server app))
(const io ((require "socket.io") server))
(server.listen port)
(def add-routes (game bundle)
  (let html-path (Path.join __dirname "games/" game "/html"))
  (route .get (Path.join "/games/" game "/js/main.js")
         (.pipe (.on (bundle.bundle) "error"
                     (aprint "bundle err")) res))
  (app.use (Path.join "/games/" game "/play") (express.static html-path)))

(def add-game (game)
  "sets up the middleware and build tools for a game's directory"

  (var bundle (browserify)
       js-path (Path.join __dirname "games/" game "/js"))

  (var dir ((create Directory) js-path))

  (add-routes game bundle)

  (pipe (Promise.resolve (auto-compile game bundle io))
        (then-do (bulk-bundle dir bundle))))

(let games ((create Directory) "./games"))
(print "games" games)

(pipe (.each games add-game)
      (.then (aprint "all games loaded"))
      (.catch  (aprint "failed to set up all the games")))
