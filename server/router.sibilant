
(def-type Tokenizer (init ( ( token-symbol-map (new Map)) )))
(export Tokenizer)

(def-generic Tokenizer.find (token token-symbol-map)
  "locate the symbol associated with a string in this namespace"
  (.get token-symbol-map token))
(def-generic Tokenizer.extract ())

(var tokenizer (create Tokenizer))
(export tokenizer)
(def-type Route (init ((list (create-instance List)))))
(def Route.apply ([state] (default list this.list))
  (def recur (node state)
    (make-promise
     (node.value state
                 {
                 done success
                 next (=> (state) (success (recur node.next state)))
                 error fail
                 })))
  (recur list.head.next))

(def-type Routing-space (init (trie (tokenizer (tokenizer)))))
(doc-string Routing-space )
(export Routing-space)

(var routing-space (create Routing-space))

(export routing-space)

(def-generic Routing-space.find (key-sequence  trie)
  (.find trie key-sequence))


(def-type Router
    (init ((routes (routing-space))
           (events (new Event-emitter)))))
(def-type Path-router)
(export Router)

(var router (create Router))
(export router)
(def-let*=> Router.recieve ([key-string state])

  ((sequence (.extract tokenizer key-string))
   (route (.find routes sequence)))

  (set-for state route)
  (.send route sequence req res state))
(def-generic Router.start (events recieve)
  (pipe events
        (.on  "message" (=> ([key-string state])
                            (.recieve this [key-string state] )))))



(def-generic Router.use (key f)
  (pipe (remember this.routes key (create-instance Routing-sequence ))
        (.add f)))


(def-generic Router.send (key-string state)
  (.emit this "message" [key-string state])

  )
(describe-it Router .use
             "should add elements to a trie."
             (let ((router (create-instance Router)))
               (.use router ["foo" "bar" "bazle"])))
