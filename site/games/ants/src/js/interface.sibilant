(include "./macros/jquery")

(import-namespace jquery)

(import-namespace defs)
(import-namespace js)

(type Table
      (init (collection paths))
      (gmth add ())
      (gmth remove ())
      (gmth update ()))

(macro describe-table ( describers ...body)
       (const [eachable each-args table-data container]
              describers.contents)
       `(scoped (var table ($ "<table>"))

                (let header-row ($ "<tr>"))
                ...@(map (content-of table-data) (entry)
                         `(.append header-row
                                   (.text ($ "<th>" )
                                          (quote @(if (literal? entry)
                                                      entry
                                                      (first entry.contents))))))

                (.append table header-row)
                (each @eachable @each-args

                      (var row ($ "<tr>" ))
                      ...@(map (content-of table-data) (entry)
                               `(let @(ternary (literal? entry)

                                       entry
                                       (first entry.contents))

                                  (scoped
                                   (let col-data (.text ($ "<td> " )
                                                        @(if (literal? entry)
                                                             entry
                                                             (second entry.contents))))
                                   (.append row col-data) col-data)))
                      (.append table row)

                      ...@body)
                (.append @container table) table))
(import ( create extend mixin) "./util")
(const $ (require "jquery/dist/jquery.min.js"))

(let context ($ "#container"))

(import (emit-pheremones Ant ) "./ant")
(import (Colony) "./colony")
(type View
      (init ()))
(type Colony-display

      (init (C (table here (.render this C here) ) )
            (print "C" C))

      (gmth render (C here)
            (describe-table (C.colonies (c) ( (id c.id) (numbers c.entities.size)) here)
                            (print "ants" c)

                            (.css id "color" (+ "rgb(" (.join [c.color.red c.color.green, c.color.blue] ",") ")"))
                            (on c.event "new species" () (.update this))

                            (on sim "tick" () (.text numbers c.entities.size))))

      (gmth update (table) (.remove table) (.render this)))


(def interface (sim C)

  (div interface-container {}
         (panel colonies ((create Colony-display) C here))) context)
(export interface)
