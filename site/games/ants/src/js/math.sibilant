(def euclidian-distance (x y a b)
  (Math.sqrt (+ (Math.pow (- x a) 2) (Math.pow (- y b) 2))))

(export euclidian-distance)

(def square (dim f)
  (let lim (Math.round (/ dim 2)))
  (for (let i (- 0 lim)) (<= i lim) (++ i)
       (for (let j (- 0 lim)) (<= j lim) (++ j)
            (print "square!" i j lim)
            (f i j)))
  null)

(def inverse-square (rate pos x y )
  (/ rate (+ 1 (Math.pow (euclidian-distance x y pos.x pos.y) 2))))

(export inverse-square)
